# Librerias
library(stringr); library(dplyr); library(rgdal); library(plyr); library(tidyverse); library(kableExtra); library(lubridate); library(ggplot2); library(plotly); library(ggpubr);library(dummies);
library(readxl);library(sf);library(GGally);library(car);library(MLmetrics);library(wordcloud);library(gplots);library(R.utils);library(tm);library(DescTools);library(raster);library(mclust);library(geosphere);library(NbClust);library(factoextra);library(vegan);library(qpcR);library(leaflet)
bd <- read.csv("incidentes_viales.csv", dec=",", header=T,sep=";", encoding = "UTF-8")
head(bd,n=5)
bd$FECHA_ACCIDENTE <- as.Date(bd$FECHA_ACCIDENTE, format="%d/%m/%Y")
bd$FECHA_ACCIDENTE <- as.Date(bd$FECHA_ACCIDENTE, format="%d/%m/%Y")
head(bd,n=5)
#Se cambia el formata de la fecha del accidente
bd$FECHA_ACCIDENTE <- as.Date(bd$FECHA_ACCIDENTE, format="%d/%m/%Y")
#Mostramos las primeras 5 observaciones de la base de datos
head(bd,n=5)
knitr::opts_chunk$set(echo = TRUE)
# Librerias
library(stringr); library(dplyr); library(rgdal); library(plyr); library(tidyverse); library(kableExtra); library(lubridate); library(ggplot2); library(plotly); library(ggpubr);library(dummies);
library(readxl);library(sf);library(GGally);library(car);library(MLmetrics);library(wordcloud);library(gplots);library(R.utils);library(tm);library(DescTools);library(raster);library(mclust);library(geosphere);library(NbClust);library(factoextra);library(vegan);library(qpcR);library(leaflet)
#Lectura de la base de datos
bd <- read.csv("./datos/incidentes_viales.csv", dec=",", header=T,sep=";", encoding = "UTF-8")
#Mostramos las primeras 5 observaciones de la base de datos
head(bd,n=5)
#Se cambia el formata de la fecha del accidente
bd$FECHA_ACCIDENTE <- as.Date(bd$FECHA_ACCIDENTE, format="%d/%m/%Y")
#Revisamos que variables contienen valores vacios
colSums(is.na(bd)|bd=="")
prueba -> bd$NUMCOMUNA,bd$BARRIO, bd$COMUNA
prueba -> bd$NUMCOMUNA
prueba <- bd$NUMCOMUNA
View(bd)
prueba <- bd$NUMCOMUNA, bd$BARRIO
prueba <- data.frame(bd$NUMCOMUNA,bd$BARRIO,bd$COMUNA)
View(prueba)
View(bd)
prueba <- data.frame(bd$CBML,bd$NUMCOMUNA,bd$BARRIO,bd$COMUNA)
View(prueba)
prueba <- data.frame(bd$CBML,bd$NUMCOMUNA,bd$BARRIO,bd$COMUNA,bd$LOCATION)
catastro <- rgdal::readOGR(dsn = "./datos/Limite_Barrio_Vereda_Catastral.shp", layer = "Limite_Barrio_Vereda_Catastral")
catastro <- rgdal::readOGR(dsn = "./datos/Catastro_gdb.shp", layer = "Catastro_gdb")
#Se eliminan datos erroneos.
bd <- bd[-which(bd$CBML %in% c("AUC1","AUC2","Inst_14","Inst_16","Inst_18","Inst_19","Sin Inf","SN01")),]
#Se crea una columna NUM_CBML, para realizar la busqueda dentro de la base de datos de catastro y llenar los datos de COMUNA Y BARRIO que esten vacios.
bd <- mutate(bd, NUM_CBML = str_sub(CBML,1,4))
#Agregamos un cero adelante a los datos de NUM_CBML
bd <- mutate(bd, TEMP_CBML=ifelse(nchar(NUM_CBML)==3,paste0("0", NUM_CBML),NUM_CBML),NUM_CBML)
colnames(bd)
View(bd)
catastro <- rgdal::readOGR(dsn = "./datos/Catastro_gdb.shp", layer = "Catastro_gdb")
#Se eliminan datos erroneos.
bd <- bd[-which(bd$CBML %in% c("AUC1","AUC2","Inst_14","Inst_16","Inst_18","Inst_19","Sin Inf","SN01")),]
#Se crea una columna NUM_CBML, para realizar la busqueda dentro de la base de datos de catastro y llenar los datos de COMUNA Y BARRIO que esten vacios.
bd <- mutate(bd, NUM_CBML = str_sub(CBML,1,4))
#Agregamos un cero adelante a los datos de NUM_CBML
bd <- mutate(bd, TEMP_CBML=ifelse(nchar(NUM_CBML)==3,paste0("0", NUM_CBML),NUM_CBML),NUM_CBML)
#se procede a realizar la union de la base datos
bd <- inner_join(bd, dplyr::select(catastro@data,CODIGO,NOMBRE_COM,NOMBRE_BAR),
by = c("TEMP_CBML" = "CODIGO")) #quedan 254009 datos
catastro <- rgdal::readOGR(dsn = "./data/Catastro_gdb", layer = "Catastro_gdb")
catastro <- rgdal::readOGR(dsn = "./data/Catastro_gdb.shp", layer = "Catastro_gdb")
catastro <- rgdal::readOGR(dsn = "./datos/Catastro_gdb.shp", layer = "Catastro_gdb")
#quitamos los 962 datos de CBML que están errados ---> quedan 269803
bd <- bd[-which(bd$CBML %in% c("AUC1","AUC2","Inst_14","Inst_16","Inst_18","Inst_19","Sin Inf","SN01")),]
#Creamos un nueva columna llamada CB en bd que solo deja los primeros 4 digitos de CBML para buscarlos en la bd de catastro y traer la comuna y el barrio de los que estén vacios.
bd <- mutate(bd, CB = str_sub(CBML,1,4))
#agregando un cero adelante a los CB y creando una nueva columna --> JCB
bd <- mutate(bd, JCB=ifelse(nchar(CB)==3,paste0("0", CB),CB),CB)
colnames(bd)#nombres de columnas
#bd unificada, se eliminan en total =  15794+962=16756 observaciones
bd <- inner_join(bd, dplyr::select(catastro@data,CODIGO,NOMBRE_COM,NOMBRE_BAR),
by = c("JCB" = "CODIGO")) #quedan 254009 datos
knitr::opts_chunk$set(echo = TRUE)
# Librerias
library(stringr); library(dplyr); library(rgdal); library(plyr); library(tidyverse); library(kableExtra); library(lubridate); library(ggplot2); library(plotly); library(ggpubr);library(dummies);
library(readxl);library(sf);library(GGally);library(car);library(MLmetrics);library(wordcloud);library(gplots);library(R.utils);library(tm);library(DescTools);library(raster);library(mclust);library(geosphere);library(NbClust);library(factoextra);library(vegan);library(qpcR);library(leaflet)
#Lectura de la base de datos
bd <- read.csv("./datos/incidentes_viales.csv", dec=",", header=T,sep=";", encoding = "UTF-8")
#Mostramos las primeras 5 observaciones de la base de datos
head(bd,n=5)
#Se cambia el formata de la fecha del accidente
bd$FECHA_ACCIDENTE <- as.Date(bd$FECHA_ACCIDENTE, format="%d/%m/%Y")
#Revisamos que variables contienen valores vacios
colSums(is.na(bd)|bd=="")
# reemplazamos los datos vacios de la variable CLASE_ACCIDENTE
#Cambiar los datos vacios por "otro".
bd$CLASE_ACCIDENTE <- ifelse(bd$CLASE_ACCIDENTE == "","Otro",bd$CLASE_ACCIDENTE)
#Correcion de tildes
bd$CLASE_ACCIDENTE <- iconv(bd$CLASE_ACCIDENTE, from = "UTF-8", to = "ASCII//TRANSLIT")
# Cambiar datos vacios de la variable DISENO
#Cambiar datos vacios por "no especificado"
bd$DISEÑO <- ifelse(bd$DISEÑO == "","otro",bd$DISEÑO)
#Correccion de tildes
bd$DISENO <- iconv(bd$DISEÑO, from = "UTF-8",to="ASCII//TRANSLIT")
#Creamos una nueva variables que contiene el dia de la semana en que ocurrio el accidente
bd$DIA_SEMANA <- format(bd$FECHA_ACCIDENTE, format="%A")
#Creamos una nueva variables la cual contiene la hora del accidente
bd$HORA_ACCIDENTE <- substr(bd$FECHA_ACCIDENTES,start = 12 ,stop = 19)
#Creamos una nueva variables que contiene el dia de la semana en que ocurrio el accidente
bd$DIA_SEMANA <- format(bd$FECHA_ACCIDENTE, format="%A")
#Creamos una nueva variables la cual contiene la hora del accidente
bd$HORA_ACCIDENTE <- substr(bd$FECHA_ACCIDENTES,start = 12 ,stop = 19)
catastro <- rgdal::readOGR(dsn = "./datos/Catastro_gdb.shp", layer = "Catastro_gdb")
#quitamos los 962 datos de CBML que están errados ---> quedan 269803
bd <- bd[-which(bd$CBML %in% c("AUC1","AUC2","Inst_14","Inst_16","Inst_18","Inst_19","Sin Inf","SN01")),]
#Creamos un nueva columna llamada CB en bd que solo deja los primeros 4 digitos de CBML para buscarlos en la bd de catastro y traer la comuna y el barrio de los que estén vacios.
bd <- mutate(bd, CB = str_sub(CBML,1,4))
#agregando un cero adelante a los CB y creando una nueva columna --> JCB
bd <- mutate(bd, JCB=ifelse(nchar(CB)==3,paste0("0", CB),CB),CB)
colnames(bd)#nombres de columnas
#bd unificada, se eliminan en total =  15794+962=16756 observaciones
bd <- inner_join(bd, dplyr::select(catastro@data,CODIGO,NOMBRE_COM,NOMBRE_BAR),
by = c("JCB" = "CODIGO")) #quedan 254009 datos
#Quitar repetidos por el inner_join
bd <- bd %>%     #convirtiendo en factor para ver mejor los únicos
mutate(NRO_RADICADO = as.factor(NRO_RADICADO))
radicados_duplicados <- bd$NRO_RADICADO[duplicated(bd$NRO_RADICADO)]
radicados_duplicados  #verificar duplicados
registros_rad_dup <- bd %>%
filter(NRO_RADICADO %in% radicados_duplicados) %>%  #
arrange(NRO_RADICADO)
#registros_rad_dup
bd_unif <- bd %>%
filter(!(NRO_RADICADO %in% radicados_duplicados))
#246417 observaciones únicas
#Lectura de la base de datos
bd <- read.csv("./datos/incidentes_viales.csv", dec=",", header=T,sep=";", encoding = "UTF-8")
#Mostramos las primeras 5 observaciones de la base de datos
head(bd,n=5)
#Se cambia el formata de la fecha del accidente
bd$FECHA_ACCIDENTE <- as.Date(bd$FECHA_ACCIDENTE, format="%d/%m/%Y")
knitr::opts_chunk$set(echo = TRUE)
# Librerias
library(stringr); library(dplyr); library(rgdal); library(plyr); library(tidyverse); library(kableExtra); library(lubridate); library(ggplot2); library(plotly); library(ggpubr);library(dummies);
library(readxl);library(sf);library(GGally);library(car);library(MLmetrics);library(wordcloud);library(gplots);library(R.utils);library(tm);library(DescTools);library(raster);library(mclust);library(geosphere);library(NbClust);library(factoextra);library(vegan);library(qpcR);library(leaflet)
#Lectura de la base de datos
bd <- read.csv("./datos/incidentes_viales.csv", dec=",", header=T,sep=";", encoding = "UTF-8")
#Mostramos las primeras 5 observaciones de la base de datos
head(bd,n=5)
#Se cambia el formata de la fecha del accidente
bd$FECHA_ACCIDENTE <- as.Date(bd$FECHA_ACCIDENTE, format="%d/%m/%Y")
#Revisamos que variables contienen valores vacios
colSums(is.na(bd)|bd=="")
# reemplazamos los datos vacios de la variable CLASE_ACCIDENTE
#Cambiar los datos vacios por "otro".
bd$CLASE_ACCIDENTE <- ifelse(bd$CLASE_ACCIDENTE == "","Otro",bd$CLASE_ACCIDENTE)
#Correcion de tildes
bd$CLASE_ACCIDENTE <- iconv(bd$CLASE_ACCIDENTE, from = "UTF-8", to = "ASCII//TRANSLIT")
# reemplazamos los datos vacios de la variable CLASE_ACCIDENTE
#Cambiar los datos vacios por "otro".
bd$CLASE_ACCIDENTE <- ifelse(bd$CLASE_ACCIDENTE == "","Otro",bd$CLASE_ACCIDENTE)
#Correcion de tildes
bd$CLASE_ACCIDENTE <- iconv(bd$CLASE_ACCIDENTE, from = "UTF-8", to = "ASCII//TRANSLIT")
# Cambiar datos vacios de la variable DISENO
#Cambiar datos vacios por "no especificado"
bd$DISEÑO <- ifelse(bd$DISEÑO == "","otro",bd$DISEÑO)
#Correccion de tildes
bd$DISENO <- iconv(bd$DISEÑO, from = "UTF-8",to="ASCII//TRANSLIT")
#Creamos una nueva variables que contiene el dia de la semana en que ocurrio el accidente
bd$DIA_SEMANA <- format(bd$FECHA_ACCIDENTE, format="%A")
#Creamos una nueva variables la cual contiene la hora del accidente
bd$HORA_ACCIDENTE <- substr(bd$FECHA_ACCIDENTES,start = 12 ,stop = 19)
catastro <- rgdal::readOGR(dsn = "./data/Catastro_gdb.shp", layer = "Catastro_gdb")
catastro <- rgdal::readOGR(dsn = "./datos/Catastro_gdb.shp", layer = "Catastro_gdb")
#quitamos los 962 datos de CBML que están errados ---> quedan 269803
bd <- bd[-which(bd$CBML %in% c("AUC1","AUC2","Inst_14","Inst_16","Inst_18","Inst_19","Sin Inf","SN01")),]
#Creamos un nueva columna llamada CB en bd que solo deja los primeros 4 digitos de CBML para buscarlos en la bd de catastro y traer la comuna y el barrio de los que estén vacios.
bd <- mutate(bd, TEMP_CBML = str_sub(CBML,1,4))
#agregando un cero adelante a los TEMP_CBML y creando una nueva columna --> TEMP2_CBML
bd <- mutate(bd, TEMP2_CBML=ifelse(nchar(TEMP_CBML)==3,paste0("0", TEMP_CBML),TEMP_CBML),TEMP_CBML)
colnames(bd)#nombres de columnas
#bd unificada, se eliminan en total =  15794+962=16756 observaciones
bd <- inner_join(bd, dplyr::select(catastro@data,CODIGO,NOMBRE_COM,NOMBRE_BAR),
by = c("TEMP2_CBML" = "CODIGO")) #quedan 254009 datos
#Quitar repetidos por el inner_join
bd <- bd %>%     #convirtiendo en factor para ver mejor los únicos
mutate(NRO_RADICADO = as.factor(NRO_RADICADO))
radicados_duplicados <- bd$NRO_RADICADO[duplicated(bd$NRO_RADICADO)]
radicados_duplicados  #verificar duplicados
registros_rad_dup <- bd %>%
filter(NRO_RADICADO %in% radicados_duplicados) %>%  #
arrange(NRO_RADICADO)
#registros_rad_dup
bd_unif <- bd %>%
filter(!(NRO_RADICADO %in% radicados_duplicados))
#246417 observaciones únicas
#Eliminacion de variables no necesarias
# X y Y, las eliminamos ya que para determinar el lugar del accidente, usaremos
# la variable LOCATION.
base2 <- dplyr::select(base_unif,-BARRIO,-COMUNA,-DIRECCION.ENCASILLADA,-CBML,-CB,-JCB,-FECHA_ACCIDENTES,-EXPEDIENTE,-DISEÑO)
#Eliminacion de variables no necesarias
base2 <- dplyr::select(bd_unif,-BARRIO,-COMUNA,-DIRECCION.ENCASILLADA,-CBML,-CB,-JCB,-FECHA_ACCIDENTES,-EXPEDIENTE,-DISEÑO)
#Eliminacion de variables no necesarias
base2 <- dplyr::select(bd_unif,-BARRIO,-COMUNA,-DIRECCION.ENCASILLADA,-CBML,-TEMP_CBML,-TEMP2_JCB,-FECHA_ACCIDENTES,-EXPEDIENTE,-DISEÑO)
#Eliminacion de variables no necesarias
base2 <- dplyr::select(bd_unif,-BARRIO,-COMUNA,-DIRECCION.ENCASILLADA,-CBML,-TEMP_CBML,-TEMP2_CBML,-FECHA_ACCIDENTES,-EXPEDIENTE,-DISEÑO)
#Correccion de tildes
base2$NOMBRE_BAR <- iconv(base2$NOMBRE_BAR, from = "UTF-8", to = "ASCII//TRANSLIT")
#separar en dos nuevas variables la longitud y latitud, contenidos en la variables LOCATION
base2 <- separate(base2,LOCATION,c("LONGITUD","LATITUD"),sep=",",convert=TRUE)
#quitamos el "[" del dato
base2$LONGITUD <- substring(base2$LONGITUD, first = 2)
#Eliminar el espacio entre los numeros
base2$LATITUD <- gsub(" ","", base2$LATITUD)
#eliminar el ultimo elemento "]"
base2$LATITUD <- gsub("]","", base2$LATITUD)
View(base2)
#renombraremos las variables
base2 <- plyr::rename(base2,  c("FECHA_ACCIDENTE"="FECHA","NOMBRE_BAR"="BARRIO","NOMBRE_COM"="COMUNA","GRAVEDAD_ACCIDENTE"="GRAVEDAD","CLASE_ACCIDENTE"="CLASE"))
View(base2)
fechas_especiales <- read.csv("dias_festivos_21.csv", sep = ",", header = T)
fechas_especiales <- read.csv("./datos/dias_festivos_21.csv", sep = ",", header = T)
class(fechas_especiales$FECHA)
fechas_especiales$FECHA <- as.Date(fechas_especiales$FECHA, format="%d/%m/%Y")#año,mes,dia
class(fechas_especiales$FECHA)
#unir las fechas espciales a la base de datos
base2 <- merge(x = base2, y = fechas_especiales, by = "FECHA", all.x = T)
base2$FESTIVIDAD <- ifelse(is.na(base2$FESTIVIDAD),"NO","SI")
base2$FESTIVIDAD <- as.factor(base2$FESTIVIDAD)
#agregando semana
base2 <- mutate(base2, SEMANA=as.factor(week(base2$FECHA)))
base2$SEMANA <- as.factor(base2$SEMANA)
#Tipo de festividad
fechas_especiales2 <- read.csv("dias_festivos2.csv",
sep = ",",
header = T)
fechas_especiales <- read.csv("./datos/dias_festivos_21.csv", sep = ",", header = T)
class(fechas_especiales$FECHA)
fechas_especiales$FECHA <- as.Date(fechas_especiales$FECHA, format="%d/%m/%Y")#año,mes,dia
class(fechas_especiales$FECHA)
#unir las fechas espciales a la base de datos
base2 <- merge(x = base2, y = fechas_especiales, by = "FECHA", all.x = T)
base2$FESTIVIDAD <- ifelse(is.na(base2$FESTIVIDAD),"NO","SI")
#agregando semana
base2 <- mutate(base2, SEMANA=as.factor(week(base2$FECHA)))
base2$SEMANA <- as.factor(base2$SEMANA)
#Tipo de festividad
fechas_especiales2 <- read.csv("dias_festivos21.csv",
sep = ",",
header = T)
#agregando semana
base2 <- mutate(base2, SEMANA=as.factor(week(base2$FECHA)))
base2$SEMANA <- as.factor(base2$SEMANA)
#Tipo de festividad
fechas_especiales2 <- read.csv("./datos/dias_festivos21.csv",
sep = ",",
header = T)
View(base2)
knitr::opts_chunk$set(echo = TRUE)
#Librerias y paquetes
#install.packages("sp") #para rgdal
#install.packages("kableExtra") #para kable (tablas html)
#install.packages("plotly")
library(stringr); library(dplyr); library(rgdal); library(plyr); library(tidyverse); library(kableExtra); library(lubridate); library(ggplot2); library(plotly); library(ggpubr);library(dummies);
library(readxl);library(sf);library(GGally);library(car);library(MLmetrics);library(wordcloud);library(gplots);library(R.utils);library(tm);library(DescTools);library(raster);library(mclust);library(geosphere);library(NbClust);library(factoextra);library(vegan);library(qpcR);library(leaflet)
base <- read.csv("incidentes_viales.csv", dec=",", header=T,sep=";", encoding = "UTF-8")
#270765 datos y 18 variables, porque se crea la variable hora y día dentro de la base
head(base,n=5)
#coercionando fecha accidente a tipo date
base$FECHA_ACCIDENTE <- as.Date(base$FECHA_ACCIDENTE, format="%d/%m/%Y")
#class(base$FECHA_ACCIDENTE)
#colSums(is.na(base)|base=="") #cuenta los vacios
#summary(base)
#str(base)
# reemplazar datos vacios de la variable CLASE_ACCIDENTE
base$CLASE_ACCIDENTE <- ifelse(base$CLASE_ACCIDENTE == "","Otro",base$CLASE_ACCIDENTE) #Cambiar nivel vacio por "otro"
base$CLASE_ACCIDENTE <- iconv(base$CLASE_ACCIDENTE, from = "UTF-8", to = "ASCII//TRANSLIT") # Correcion tildes
# Cambiar datos vacios de la variable DISENO y correccion de niveles
base$DISEÑO <- ifelse(base$DISEÑO == "","otro",base$DISEÑO) #Cambiar nivel vacio por no especificado
base$DISENO <- iconv(base$DISEÑO, from = "UTF-8",to="ASCII//TRANSLIT") #Quitar tildes
catastro <- rgdal::readOGR(dsn = "D:/Users/Usuario/Desktop/UN/11. SEMESTRE XI/TAE/Limite_Barrio_Vereda_Catastral.shp", layer = "Limite_Barrio_Vereda_Catastral")
knitr::opts_chunk$set(echo = TRUE)
# Librerias
library(stringr); library(dplyr); library(rgdal); library(plyr); library(tidyverse); library(kableExtra); library(lubridate); library(ggplot2); library(plotly); library(ggpubr);library(dummies);
library(readxl);library(sf);library(GGally);library(car);library(MLmetrics);library(wordcloud);library(gplots);library(R.utils);library(tm);library(DescTools);library(raster);library(mclust);library(geosphere);library(NbClust);library(factoextra);library(vegan);library(qpcR);library(leaflet)
knitr::opts_chunk$set(echo = TRUE)
# Librerias
library(stringr); library(dplyr); library(rgdal); library(plyr); library(tidyverse); library(kableExtra); library(lubridate); library(ggplot2); library(plotly); library(ggpubr);library(dummies);
library(readxl);library(sf);library(GGally);library(car);library(MLmetrics);library(wordcloud);library(gplots);library(R.utils);library(tm);library(DescTools);library(raster);library(mclust);library(geosphere);library(NbClust);library(factoextra);library(vegan);library(qpcR);library(leaflet)
#Lectura de la base de datos
bd <- read.csv("./datos/incidentes_viales.csv", dec=",", header=T,sep=";", encoding = "UTF-8")
#Mostramos las primeras 5 observaciones de la base de datos
head(bd,n=5)
#Se cambia el formata de la fecha del accidente
bd$FECHA_ACCIDENTE <- as.Date(bd$FECHA_ACCIDENTE, format="%d/%m/%Y")
#Revisamos que variables contienen valores vacios
colSums(is.na(bd)|bd=="")
# reemplazamos los datos vacios de la variable CLASE_ACCIDENTE
#Cambiar los datos vacios por "otro".
bd$CLASE_ACCIDENTE <- ifelse(bd$CLASE_ACCIDENTE == "","Otro",bd$CLASE_ACCIDENTE)
#Correcion de tildes
bd$CLASE_ACCIDENTE <- iconv(bd$CLASE_ACCIDENTE, from = "UTF-8", to = "ASCII//TRANSLIT")
# Cambiar datos vacios de la variable DISENO
#Cambiar datos vacios por "no especificado"
bd$DISEÑO <- ifelse(bd$DISEÑO == "","otro",bd$DISEÑO)
#Correccion de tildes
bd$DISENO <- iconv(bd$DISEÑO, from = "UTF-8",to="ASCII//TRANSLIT")
#Creamos una nueva variables que contiene el dia de la semana en que ocurrio el accidente
bd$DIA_SEMANA <- format(bd$FECHA_ACCIDENTE, format="%A")
#Creamos una nueva variables la cual contiene la hora del accidente
bd$HORA_ACCIDENTE <- substr(bd$FECHA_ACCIDENTES,start = 12 ,stop = 19)
catastro <- rgdal::readOGR(dsn = "./datos/Catastro_gdb.shp", layer = "Catastro_gdb")
#quitamos los 962 datos de CBML que están errados ---> quedan 269803
bd <- bd[-which(bd$CBML %in% c("AUC1","AUC2","Inst_14","Inst_16","Inst_18","Inst_19","Sin Inf","SN01")),]
#Creamos un nueva columna llamada CB en bd que solo deja los primeros 4 digitos de CBML para buscarlos en la bd de catastro y traer la comuna y el barrio de los que estén vacios.
bd <- mutate(bd, TEMP_CBML = str_sub(CBML,1,4))
#agregando un cero adelante a los TEMP_CBML y creando una nueva columna --> TEMP2_CBML
bd <- mutate(bd, TEMP2_CBML=ifelse(nchar(TEMP_CBML)==3,paste0("0", TEMP_CBML),TEMP_CBML),TEMP_CBML)
colnames(bd)#nombres de columnas
#base unificada
bd <- inner_join(bd, dplyr::select(catastro@data,CODIGO,NOMBRE_COM,NOMBRE_BAR),
by = c("TEMP2_CBML" = "CODIGO")) #quedan 254009 datos
#Quitar repetidos por el inner_join
bd <- bd %>%     #convirtiendo en factor para ver mejor los únicos
mutate(NRO_RADICADO = as.factor(NRO_RADICADO))
radicados_duplicados <- bd$NRO_RADICADO[duplicated(bd$NRO_RADICADO)]
radicados_duplicados  #verificar duplicados
registros_rad_dup <- bd %>%
filter(NRO_RADICADO %in% radicados_duplicados) %>%  #
arrange(NRO_RADICADO)
#registros_rad_dup
bd_unif <- bd %>%
filter(!(NRO_RADICADO %in% radicados_duplicados))
#246417 observaciones únicas
#Eliminacion de variables no necesarias
base2 <- dplyr::select(bd_unif,-BARRIO,-COMUNA,-DIRECCION.ENCASILLADA,-CBML,-TEMP_CBML,-TEMP2_CBML,-FECHA_ACCIDENTES,-EXPEDIENTE,-DISEÑO)
#Correccion de tildes
base2$NOMBRE_BAR <- iconv(base2$NOMBRE_BAR, from = "UTF-8", to = "ASCII//TRANSLIT")
#separar en dos nuevas variables la longitud y latitud, contenidos en la variables LOCATION
base2 <- separate(base2,LOCATION,c("LONGITUD","LATITUD"),sep=",",convert=TRUE)
#quitamos el "[" del dato
base2$LONGITUD <- substring(base2$LONGITUD, first = 2)
#Eliminar el espacio entre los numeros
base2$LATITUD <- gsub(" ","", base2$LATITUD)
#eliminar el ultimo elemento "]"
base2$LATITUD <- gsub("]","", base2$LATITUD)
#renombraremos las variables
base2 <- plyr::rename(base2,  c("FECHA_ACCIDENTE"="FECHA","NOMBRE_BAR"="BARRIO","NOMBRE_COM"="COMUNA","GRAVEDAD_ACCIDENTE"="GRAVEDAD","CLASE_ACCIDENTE"="CLASE"))
fechas_especiales <- read.csv("./datos/dias_festivos_21.csv", sep = ",", header = T)
class(fechas_especiales$FECHA)
fechas_especiales$FECHA <- as.Date(fechas_especiales$FECHA, format="%d/%m/%Y")#año,mes,dia
class(fechas_especiales$FECHA)
#unir las fechas espciales a la base de datos
base2 <- merge(x = base2, y = fechas_especiales, by = "FECHA", all.x = T)
base2$FESTIVIDAD <- ifelse(is.na(base2$FESTIVIDAD),"NO","SI")
base2$FESTIVIDAD <- as.factor(base2$FESTIVIDAD)
#agregando semana
base2 <- mutate(base2, SEMANA=as.factor(week(base2$FECHA)))
base2$SEMANA <- as.factor(base2$SEMANA)
#Tipo de festividad
fechas_especiales2 <- read.csv("./datos/dias_festivos_21.csv",
sep = ",",
header = T)
#convertir a date
fechas_especiales2$FECHA <- as.Date(fechas_especiales2$FECHA, format="%d/%m/%Y")#año,mes,dia
class(base2$FECHA)
class(fechas_especiales2$FECHA)
#pegando el tipo de festividad, se crea una columna que se llama tipo_festividad
base_prueba <- left_join(base2, dplyr::select(fechas_especiales2,FECHA,TIPO_FESTIVIDAD),
by = c("FECHA" = "FECHA"))
View(base2)
cbind(base2,TIPO_FESTIVIDAD)
#pegando el tipo de festividad, se crea una columna que se llama tipo_festividad
base_prueba <- left_join(base2, dplyr::select(fechas_especiales2,FECHA,TIPO_FESTIVIDAD),
by = c("FECHA" = "FECHA"))
#pegando el tipo de festividad, se crea una columna que se llama tipo_festividad
base2 <- cbind(base2,TIPO_FESTIVIDAD)
base_prueba <- left_join(base2, dplyr::select(fechas_especiales2,FECHA,TIPO_FESTIVIDAD),
by = c("FECHA" = "FECHA"))
#agregando semana
base2 <- mutate(base2, SEMANA=as.factor(week(base2$FECHA)))
base2$SEMANA <- as.factor(base2$SEMANA)
#Tipo de festividad
fechas_especiales2 <- read.csv("./datos/dias_festivos_21.csv",
sep = ",",
header = T)
#convertir a date
fechas_especiales2$FECHA <- as.Date(fechas_especiales2$FECHA, format="%d/%m/%Y")#año,mes,dia
class(base2$FECHA)
class(fechas_especiales2$FECHA)
base_prueba <- left_join(base2, dplyr::select(fechas_especiales2,FECHA,TIPO_FESTIVIDAD),
by = c("FECHA" = "FECHA"))
base_prueba <- left_join(base2, dplyr::select(fechas_especiales2,FECHA),
by = c("FECHA" = "FECHA"))
base_prueba$TIPO_FESTIVIDAD <- factor(base_prueba$TIPO_FESTIVIDAD, levels = c("A_NUEVO","BRUJAS","FESTIVO","MADRES","NAVIDAD","SEM_SANTA","No_festivo"))
View(base_prueba)
#pegando el tipo de festividad, se crea una columna que se llama tipo_festividad
base_prueba <- cbind(base_prueba,TIPO_FESTIVIDAD)
#pegando el tipo de festividad, se crea una columna que se llama tipo_festividad
cbind(base_prueba,TIPO_FESTIVIDAD)
View(base2)
#Eliminacion de variables no necesarias
base2 <- dplyr::select(bd_unif,-X,-Y,-BARRIO,-COMUNA,-DIRECCION.ENCASILLADA,-CBML,-TEMP_CBML,-TEMP2_CBML,-FECHA_ACCIDENTES,-EXPEDIENTE,-DISEÑO)
View(base2)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Librerias
library(stringr); library(dplyr); library(rgdal); library(plyr); library(tidyverse); library(kableExtra); library(lubridate); library(ggplot2); library(plotly); library(ggpubr);library(dummies);
library(readxl);library(sf);library(GGally);library(car);library(MLmetrics);library(wordcloud);library(gplots);library(R.utils);library(tm);library(DescTools);library(raster);library(mclust);library(geosphere);library(NbClust);library(factoextra);library(vegan);library(qpcR);library(leaflet)
#Lectura de la base de datos
bd <- read.csv("./datos/incidentes_viales.csv", dec=",", header=T,sep=";", encoding = "UTF-8")
#Mostramos las primeras 5 observaciones de la base de datos
head(bd,n=5)
#Se cambia el formata de la fecha del accidente
bd$FECHA_ACCIDENTE <- as.Date(bd$FECHA_ACCIDENTE, format="%d/%m/%Y")
#Revisamos que variables contienen valores vacios
colSums(is.na(bd)|bd=="")
# reemplazamos los datos vacios de la variable CLASE_ACCIDENTE
#Cambiar los datos vacios por "otro".
bd$CLASE_ACCIDENTE <- ifelse(bd$CLASE_ACCIDENTE == "","Otro",bd$CLASE_ACCIDENTE)
#Correcion de tildes
bd$CLASE_ACCIDENTE <- iconv(bd$CLASE_ACCIDENTE, from = "UTF-8", to = "ASCII//TRANSLIT")
# Cambiar datos vacios de la variable DISENO
#Cambiar datos vacios por "no especificado"
bd$DISEÑO <- ifelse(bd$DISEÑO == "","otro",bd$DISEÑO)
#Correccion de tildes
bd$DISENO <- iconv(bd$DISEÑO, from = "UTF-8",to="ASCII//TRANSLIT")
#Creamos una nueva variables que contiene el dia de la semana en que ocurrio el accidente
bd$DIA_SEMANA <- format(bd$FECHA_ACCIDENTE, format="%A")
#Creamos una nueva variables la cual contiene la hora del accidente
bd$HORA_ACCIDENTE <- substr(bd$FECHA_ACCIDENTES,start = 12 ,stop = 19)
catastro <- rgdal::readOGR(dsn = "./datos/Catastro_gdb.shp", layer = "Catastro_gdb")
#quitamos los 962 datos de CBML que están errados ---> quedan 269803
bd <- bd[-which(bd$CBML %in% c("AUC1","AUC2","Inst_14","Inst_16","Inst_18","Inst_19","Sin Inf","SN01")),]
#Creamos un nueva columna llamada CB en bd que solo deja los primeros 4 digitos de CBML para buscarlos en la bd de catastro y traer la comuna y el barrio de los que estén vacios.
bd <- mutate(bd, TEMP_CBML = str_sub(CBML,1,4))
#agregando un cero adelante a los TEMP_CBML y creando una nueva columna --> TEMP2_CBML
bd <- mutate(bd, TEMP2_CBML=ifelse(nchar(TEMP_CBML)==3,paste0("0", TEMP_CBML),TEMP_CBML),TEMP_CBML)
colnames(bd)#nombres de columnas
#base unificada
bd <- inner_join(bd, dplyr::select(catastro@data,CODIGO,NOMBRE_COM,NOMBRE_BAR),
by = c("TEMP2_CBML" = "CODIGO")) #quedan 254009 datos
#Quitar repetidos por el inner_join
bd <- bd %>%     #convirtiendo en factor para ver mejor los únicos
mutate(NRO_RADICADO = as.factor(NRO_RADICADO))
radicados_duplicados <- bd$NRO_RADICADO[duplicated(bd$NRO_RADICADO)]
radicados_duplicados  #verificar duplicados
registros_rad_dup <- bd %>%
filter(NRO_RADICADO %in% radicados_duplicados) %>%  #
arrange(NRO_RADICADO)
#registros_rad_dup
bd_unif <- bd %>%
filter(!(NRO_RADICADO %in% radicados_duplicados))
#246417 observaciones únicas
View(bd)
knitr::opts_chunk$set(echo = TRUE)
# Librerias
library(stringr); library(dplyr); library(rgdal); library(plyr); library(tidyverse); library(kableExtra); library(lubridate); library(ggplot2); library(plotly); library(ggpubr);library(dummies);
library(readxl);library(sf);library(GGally);library(car);library(MLmetrics);library(wordcloud);library(gplots);library(R.utils);library(tm);library(DescTools);library(raster);library(mclust);library(geosphere);library(NbClust);library(factoextra);library(vegan);library(qpcR);library(leaflet)
#Lectura de la base de datos
bd <- read.csv("./datos/incidentes_viales.csv", dec=",", header=T,sep=";", encoding = "UTF-8")
#Mostramos las primeras 5 observaciones de la base de datos
head(bd,n=5)
#Se cambia el formata de la fecha del accidente
bd$FECHA_ACCIDENTE <- as.Date(bd$FECHA_ACCIDENTE, format="%d/%m/%Y")
#Revisamos que variables contienen valores vacios
colSums(is.na(bd)|bd=="")
# reemplazamos los datos vacios de la variable CLASE_ACCIDENTE
#Cambiar los datos vacios por "otro".
bd$CLASE_ACCIDENTE <- ifelse(bd$CLASE_ACCIDENTE == "","Otro",bd$CLASE_ACCIDENTE)
#Correcion de tildes
bd$CLASE_ACCIDENTE <- iconv(bd$CLASE_ACCIDENTE, from = "UTF-8", to = "ASCII//TRANSLIT")
# Cambiar datos vacios de la variable DISENO
#Cambiar datos vacios por "no especificado"
bd$DISEÑO <- ifelse(bd$DISEÑO == "","otro",bd$DISEÑO)
#Correccion de tildes
bd$DISENO <- iconv(bd$DISEÑO, from = "UTF-8",to="ASCII//TRANSLIT")
#Creamos una nueva variables que contiene el dia de la semana en que ocurrio el accidente
bd$DIA_SEMANA <- format(bd$FECHA_ACCIDENTE, format="%A")
#Creamos una nueva variables la cual contiene la hora del accidente
bd$HORA_ACCIDENTE <- substr(bd$FECHA_ACCIDENTES,start = 12 ,stop = 19)
catastro <- rgdal::readOGR(dsn = "./datos/Catastro_gdb.shp", layer = "Catastro_gdb")
#quitamos los 962 datos de CBML que están errados ---> quedan 269803
bd <- bd[-which(bd$CBML %in% c("AUC1","AUC2","Inst_14","Inst_16","Inst_18","Inst_19","Sin Inf","SN01")),]
#Creamos un nueva columna llamada CB en bd que solo deja los primeros 4 digitos de CBML para buscarlos en la bd de catastro y traer la comuna y el barrio de los que estén vacios.
bd <- mutate(bd, TEMP_CBML = str_sub(CBML,1,4))
#agregando un cero adelante a los TEMP_CBML y creando una nueva columna --> TEMP2_CBML
bd <- mutate(bd, TEMP2_CBML=ifelse(nchar(TEMP_CBML)==3,paste0("0", TEMP_CBML),TEMP_CBML),TEMP_CBML)
colnames(bd)#nombres de columnas
#base unificada
bd <- inner_join(bd, dplyr::select(catastro@data,CODIGO,NOMBRE_COM,NOMBRE_BAR),
by = c("TEMP2_CBML" = "CODIGO")) #quedan 254009 datos
#Quitar repetidos por el inner_join
bd <- bd %>%     #convirtiendo en factor para ver mejor los únicos
mutate(NRO_RADICADO = as.factor(NRO_RADICADO))
radicados_duplicados <- bd$NRO_RADICADO[duplicated(bd$NRO_RADICADO)]
radicados_duplicados  #verificar duplicados
registros_rad_dup <- bd %>%
filter(NRO_RADICADO %in% radicados_duplicados) %>%  #
arrange(NRO_RADICADO)
#registros_rad_dup
bd_unif <- bd %>%
filter(!(NRO_RADICADO %in% radicados_duplicados))
#246417 observaciones únicas
#Eliminacion de variables no necesarias
base2 <- dplyr::select(bd_unif,-X,-Y,-BARRIO,-COMUNA,-DIRECCION.ENCASILLADA,-CBML,-TEMP_CBML,-TEMP2_CBML,-FECHA_ACCIDENTES,-EXPEDIENTE,-DISEÑO)
#Correccion de tildes
base2$NOMBRE_BAR <- iconv(base2$NOMBRE_BAR, from = "UTF-8", to = "ASCII//TRANSLIT")
#separar en dos nuevas variables la longitud y latitud, contenidos en la variables LOCATION
base2 <- separate(base2,LOCATION,c("LONGITUD","LATITUD"),sep=",",convert=TRUE)
#quitamos el "[" del dato
base2$LONGITUD <- substring(base2$LONGITUD, first = 2)
#Eliminar el espacio entre los numeros
base2$LATITUD <- gsub(" ","", base2$LATITUD)
#eliminar el ultimo elemento "]"
base2$LATITUD <- gsub("]","", base2$LATITUD)
#renombraremos las variables
base2 <- plyr::rename(base2,  c("FECHA_ACCIDENTE"="FECHA","NOMBRE_BAR"="BARRIO","NOMBRE_COM"="COMUNA","GRAVEDAD_ACCIDENTE"="GRAVEDAD","CLASE_ACCIDENTE"="CLASE"))
View(base2)
View(base2)
#EJECUTAR SOLO PARA CREAR EL CSV NUEVO
write.csv(base2,"./datos/base_depurada",fileEncoding = "UTF-8")
#EJECUTAR SOLO PARA CREAR EL CSV NUEVO
#write.csv(base2,"./datos/base_depurada.csv",fileEncoding = "UTF-8")
#EJECUTAR SOLO PARA CREAR EL CSV NUEVO
write.csv(base2,"./datos/base_depurada.csv",fileEncoding = "UTF-8")
