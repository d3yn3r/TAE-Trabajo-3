bd$DIA_SEMANA <- format(bd$FECHA_ACCIDENTE, format="%A")
#Creamos una nueva variables la cual contiene la hora del accidente
bd$HORA_ACCIDENTE <- substr(bd$FECHA_ACCIDENTES,start = 12 ,stop = 19)
catastro <- rgdal::readOGR(dsn = "./datos/Catastro_gdb.shp", layer = "Catastro_gdb")
#quitamos los 962 datos de CBML que están errados ---> quedan 269803
bd <- bd[-which(bd$CBML %in% c("AUC1","AUC2","Inst_14","Inst_16","Inst_18","Inst_19","Sin Inf","SN01")),]
#Creamos un nueva columna llamada CB en bd que solo deja los primeros 4 digitos de CBML para buscarlos en la bd de catastro y traer la comuna y el barrio de los que estén vacios.
bd <- mutate(bd, TEMP_CBML = str_sub(CBML,1,4))
#agregando un cero adelante a los TEMP_CBML y creando una nueva columna --> TEMP2_CBML
bd <- mutate(bd, TEMP2_CBML=ifelse(nchar(TEMP_CBML)==3,paste0("0", TEMP_CBML),TEMP_CBML),TEMP_CBML)
colnames(bd)#nombres de columnas
#base unificada
bd <- inner_join(bd, dplyr::select(catastro@data,CODIGO,NOMBRE_COM,NOMBRE_BAR),
by = c("TEMP2_CBML" = "CODIGO")) #quedan 254009 datos
#Quitar repetidos por el inner_join
bd <- bd %>%     #convirtiendo en factor para ver mejor los únicos
mutate(NRO_RADICADO = as.factor(NRO_RADICADO))
radicados_duplicados <- bd$NRO_RADICADO[duplicated(bd$NRO_RADICADO)]
radicados_duplicados  #verificar duplicados
registros_rad_dup <- bd %>%
filter(NRO_RADICADO %in% radicados_duplicados) %>%  #
arrange(NRO_RADICADO)
#registros_rad_dup
bd_unif <- bd %>%
filter(!(NRO_RADICADO %in% radicados_duplicados))
#246417 observaciones únicas
View(bd)
knitr::opts_chunk$set(echo = TRUE)
# Librerias
library(stringr); library(dplyr); library(rgdal); library(plyr); library(tidyverse); library(kableExtra); library(lubridate); library(ggplot2); library(plotly); library(ggpubr);library(dummies);
library(readxl);library(sf);library(GGally);library(car);library(MLmetrics);library(wordcloud);library(gplots);library(R.utils);library(tm);library(DescTools);library(raster);library(mclust);library(geosphere);library(NbClust);library(factoextra);library(vegan);library(qpcR);library(leaflet)
#Lectura de la base de datos
bd <- read.csv("./datos/incidentes_viales.csv", dec=",", header=T,sep=";", encoding = "UTF-8")
#Mostramos las primeras 5 observaciones de la base de datos
head(bd,n=5)
#Se cambia el formata de la fecha del accidente
bd$FECHA_ACCIDENTE <- as.Date(bd$FECHA_ACCIDENTE, format="%d/%m/%Y")
#Revisamos que variables contienen valores vacios
colSums(is.na(bd)|bd=="")
# reemplazamos los datos vacios de la variable CLASE_ACCIDENTE
#Cambiar los datos vacios por "otro".
bd$CLASE_ACCIDENTE <- ifelse(bd$CLASE_ACCIDENTE == "","Otro",bd$CLASE_ACCIDENTE)
#Correcion de tildes
bd$CLASE_ACCIDENTE <- iconv(bd$CLASE_ACCIDENTE, from = "UTF-8", to = "ASCII//TRANSLIT")
# Cambiar datos vacios de la variable DISENO
#Cambiar datos vacios por "no especificado"
bd$DISEÑO <- ifelse(bd$DISEÑO == "","otro",bd$DISEÑO)
#Correccion de tildes
bd$DISENO <- iconv(bd$DISEÑO, from = "UTF-8",to="ASCII//TRANSLIT")
#Creamos una nueva variables que contiene el dia de la semana en que ocurrio el accidente
bd$DIA_SEMANA <- format(bd$FECHA_ACCIDENTE, format="%A")
#Creamos una nueva variables la cual contiene la hora del accidente
bd$HORA_ACCIDENTE <- substr(bd$FECHA_ACCIDENTES,start = 12 ,stop = 19)
catastro <- rgdal::readOGR(dsn = "./datos/Catastro_gdb.shp", layer = "Catastro_gdb")
#quitamos los 962 datos de CBML que están errados ---> quedan 269803
bd <- bd[-which(bd$CBML %in% c("AUC1","AUC2","Inst_14","Inst_16","Inst_18","Inst_19","Sin Inf","SN01")),]
#Creamos un nueva columna llamada CB en bd que solo deja los primeros 4 digitos de CBML para buscarlos en la bd de catastro y traer la comuna y el barrio de los que estén vacios.
bd <- mutate(bd, TEMP_CBML = str_sub(CBML,1,4))
#agregando un cero adelante a los TEMP_CBML y creando una nueva columna --> TEMP2_CBML
bd <- mutate(bd, TEMP2_CBML=ifelse(nchar(TEMP_CBML)==3,paste0("0", TEMP_CBML),TEMP_CBML),TEMP_CBML)
colnames(bd)#nombres de columnas
#base unificada
bd <- inner_join(bd, dplyr::select(catastro@data,CODIGO,NOMBRE_COM,NOMBRE_BAR),
by = c("TEMP2_CBML" = "CODIGO")) #quedan 254009 datos
#Quitar repetidos por el inner_join
bd <- bd %>%     #convirtiendo en factor para ver mejor los únicos
mutate(NRO_RADICADO = as.factor(NRO_RADICADO))
radicados_duplicados <- bd$NRO_RADICADO[duplicated(bd$NRO_RADICADO)]
radicados_duplicados  #verificar duplicados
registros_rad_dup <- bd %>%
filter(NRO_RADICADO %in% radicados_duplicados) %>%  #
arrange(NRO_RADICADO)
#registros_rad_dup
bd_unif <- bd %>%
filter(!(NRO_RADICADO %in% radicados_duplicados))
#246417 observaciones únicas
#Eliminacion de variables no necesarias
base2 <- dplyr::select(bd_unif,-X,-Y,-BARRIO,-COMUNA,-DIRECCION.ENCASILLADA,-CBML,-TEMP_CBML,-TEMP2_CBML,-FECHA_ACCIDENTES,-EXPEDIENTE,-DISEÑO)
#Correccion de tildes
base2$NOMBRE_BAR <- iconv(base2$NOMBRE_BAR, from = "UTF-8", to = "ASCII//TRANSLIT")
#separar en dos nuevas variables la longitud y latitud, contenidos en la variables LOCATION
base2 <- separate(base2,LOCATION,c("LONGITUD","LATITUD"),sep=",",convert=TRUE)
#quitamos el "[" del dato
base2$LONGITUD <- substring(base2$LONGITUD, first = 2)
#Eliminar el espacio entre los numeros
base2$LATITUD <- gsub(" ","", base2$LATITUD)
#eliminar el ultimo elemento "]"
base2$LATITUD <- gsub("]","", base2$LATITUD)
#renombraremos las variables
base2 <- plyr::rename(base2,  c("FECHA_ACCIDENTE"="FECHA","NOMBRE_BAR"="BARRIO","NOMBRE_COM"="COMUNA","GRAVEDAD_ACCIDENTE"="GRAVEDAD","CLASE_ACCIDENTE"="CLASE"))
View(base2)
View(base2)
#EJECUTAR SOLO PARA CREAR EL CSV NUEVO
write.csv(base2,"./datos/base_depurada",fileEncoding = "UTF-8")
#EJECUTAR SOLO PARA CREAR EL CSV NUEVO
#write.csv(base2,"./datos/base_depurada.csv",fileEncoding = "UTF-8")
#EJECUTAR SOLO PARA CREAR EL CSV NUEVO
write.csv(base2,"./datos/base_depurada.csv",fileEncoding = "UTF-8")
knitr::opts_chunk$set(echo = TRUE)
# Librerias
library(stringr); library(dplyr); library(rgdal); library(plyr); library(tidyverse); library(kableExtra); library(lubridate); library(ggplot2); library(plotly); library(ggpubr);library(dummies);
library(readxl);library(sf);library(GGally);library(car);library(MLmetrics);library(wordcloud);library(gplots);library(R.utils);library(tm);library(DescTools);library(raster);library(mclust);library(geosphere);library(NbClust);library(factoextra);library(vegan);library(qpcR);library(leaflet)
#Lectura de la base de datos
bd <- read.csv("./datos/incidentes_viales.csv", dec=",", header=T,sep=";", encoding = "UTF-8")
#Mostramos las primeras 5 observaciones de la base de datos
head(bd,n=5)
#Se cambia el formata de la fecha del accidente
bd$FECHA_ACCIDENTE <- as.Date(bd$FECHA_ACCIDENTE, format="%d/%m/%Y")
#Revisamos que variables contienen valores vacios
colSums(is.na(bd)|bd=="")
# reemplazamos los datos vacios de la variable CLASE_ACCIDENTE
#Cambiar los datos vacios por "otro".
bd$CLASE_ACCIDENTE <- ifelse(bd$CLASE_ACCIDENTE == "","Otro",bd$CLASE_ACCIDENTE)
#Correcion de tildes
bd$CLASE_ACCIDENTE <- iconv(bd$CLASE_ACCIDENTE, from = "UTF-8", to = "ASCII//TRANSLIT")
# Cambiar datos vacios de la variable DISENO
#Cambiar datos vacios por "no especificado"
bd$DISEÑO <- ifelse(bd$DISEÑO == "","otro",bd$DISEÑO)
# Cambiar datos vacios de la variable DISENO
#Cambiar datos vacios por "no especificado"
bd$DISEÑO <- ifelse(bd$DISEÑO == " ","otro",bd$DISEÑO)
View(bd)
#Lectura de la base de datos
bd <- read.csv("./datos/incidentes_viales.csv", dec=",", header=T,sep=";", encoding = "UTF-8")
View(bd)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Librerias
library(stringr); library(dplyr); library(rgdal); library(plyr); library(tidyverse); library(kableExtra); library(lubridate); library(ggplot2); library(plotly); library(ggpubr);library(dummies);
library(readxl);library(sf);library(GGally);library(car);library(MLmetrics);library(wordcloud);library(gplots);library(R.utils);library(tm);library(DescTools);library(raster);library(mclust);library(geosphere);library(NbClust);library(factoextra);library(vegan);library(qpcR);library(leaflet)
#Lectura de la base de datos
bd <- read.csv("./datos/incidentes_viales.csv", dec=",", header=T,sep=";", encoding = "UTF-8")
knitr::opts_chunk$set(echo = TRUE)
# Librerias
library(stringr); library(dplyr); library(rgdal); library(plyr); library(tidyverse); library(kableExtra); library(lubridate); library(ggplot2); library(plotly); library(ggpubr);library(dummies);
library(readxl);library(sf);library(GGally);library(car);library(MLmetrics);library(wordcloud);library(gplots);library(R.utils);library(tm);library(DescTools);library(raster);library(mclust);library(geosphere);library(NbClust);library(factoextra);library(vegan);library(qpcR);library(leaflet)
#Lectura de la base de datos
bd <- read.csv("./datos/incidentes_viales.csv", dec=",", header=T,sep=";", encoding = "UTF-8")
View(bd)
View(bd)
#Lectura de la base de datos
bd <- read.csv("./datos/incidentes_viales.csv", dec=",", header=T,sep=";", encoding = "UTF-8")
#Mostramos las primeras 5 observaciones de la base de datos
head(bd,n=5)
knitr::opts_chunk$set(echo = TRUE)
# Librerias
library(stringr); library(dplyr); library(rgdal); library(plyr); library(tidyverse); library(kableExtra); library(lubridate); library(ggplot2); library(plotly); library(ggpubr);library(dummies);
library(readxl);library(sf);library(GGally);library(car);library(MLmetrics);library(wordcloud);library(gplots);library(R.utils);library(tm);library(DescTools);library(raster);library(mclust);library(geosphere);library(NbClust);library(factoextra);library(vegan);library(qpcR);library(leaflet)
#Lectura de la base de datos
bd <- read.csv("./datos/incidentes_viales.csv", dec=",", header=T,sep=";", encoding = "UTF-8")
View(bd)
#Lectura de la base de datos
bd <- read.csv("./datos/incidentes_viales.csv", dec=",", header=T,sep=";")
knitr::opts_chunk$set(echo = TRUE)
# Librerias
library(stringr); library(dplyr); library(rgdal); library(plyr); library(tidyverse); library(kableExtra); library(lubridate); library(ggplot2); library(plotly); library(ggpubr);library(dummies);
library(readxl);library(sf);library(GGally);library(car);library(MLmetrics);library(wordcloud);library(gplots);library(R.utils);library(tm);library(DescTools);library(raster);library(mclust);library(geosphere);library(NbClust);library(factoextra);library(vegan);library(qpcR);library(leaflet)
#Lectura de la base de datos
bd <- read.csv("./datos/incidentes_viales.csv", dec=",", header=T,sep=";")
#Mostramos las primeras 5 observaciones de la base de datos
head(bd,n=5)
#Se cambia el formata de la fecha del accidente
bd$FECHA_ACCIDENTE <- as.Date(bd$FECHA_ACCIDENTE, format="%d/%m/%Y")
#Revisamos que variables contienen valores vacios
colSums(is.na(bd)|bd=="")
# reemplazamos los datos vacios de la variable CLASE_ACCIDENTE
#Cambiar los datos vacios por "otro".
bd$CLASE_ACCIDENTE <- ifelse(bd$CLASE_ACCIDENTE == "","Otro",bd$CLASE_ACCIDENTE)
#Correcion de tildes
bd$CLASE_ACCIDENTE <- iconv(bd$CLASE_ACCIDENTE, from = "UTF-8", to = "ASCII//TRANSLIT")
# Cambiar datos vacios de la variable DISENO
#Cambiar datos vacios por "no especificado"
bd$DISENO <- ifelse(bd$DISENO == "","otro",bd$DISENO)
#Correccion de tildes
bd$DISENO <- iconv(bd$DISENO, from = "UTF-8",to="ASCII//TRANSLIT")
#Creamos una nueva variables que contiene el dia de la semana en que ocurrio el accidente
bd$DIA_SEMANA <- format(bd$FECHA_ACCIDENTE, format="%A")
#Creamos una nueva variables la cual contiene la hora del accidente
bd$HORA_ACCIDENTE <- substr(bd$FECHA_ACCIDENTES,start = 12 ,stop = 19)
catastro <- rgdal::readOGR(dsn = "./datos/Catastro_gdb.shp", layer = "Catastro_gdb")
#quitamos los 962 datos de CBML que están errados ---> quedan 269803
bd <- bd[-which(bd$CBML %in% c("AUC1","AUC2","Inst_14","Inst_16","Inst_18","Inst_19","Sin Inf","SN01")),]
#Creamos un nueva columna llamada CB en bd que solo deja los primeros 4 digitos de CBML para buscarlos en la bd de catastro y traer la comuna y el barrio de los que estén vacios.
bd <- mutate(bd, TEMP_CBML = str_sub(CBML,1,4))
#agregando un cero adelante a los TEMP_CBML y creando una nueva columna --> TEMP2_CBML
bd <- mutate(bd, TEMP2_CBML=ifelse(nchar(TEMP_CBML)==3,paste0("0", TEMP_CBML),TEMP_CBML),TEMP_CBML)
colnames(bd)#nombres de columnas
#base unificada
bd <- inner_join(bd, dplyr::select(catastro@data,CODIGO,NOMBRE_COM,NOMBRE_BAR),
by = c("TEMP2_CBML" = "CODIGO")) #quedan 254009 datos
#Quitar repetidos por el inner_join
bd <- bd %>%     #convirtiendo en factor para ver mejor los únicos
mutate(NRO_RADICADO = as.factor(NRO_RADICADO))
radicados_duplicados <- bd$NRO_RADICADO[duplicated(bd$NRO_RADICADO)]
radicados_duplicados  #verificar duplicados
registros_rad_dup <- bd %>%
filter(NRO_RADICADO %in% radicados_duplicados) %>%  #
arrange(NRO_RADICADO)
#registros_rad_dup
bd_unif <- bd %>%
filter(!(NRO_RADICADO %in% radicados_duplicados))
#246417 observaciones únicas
#Eliminacion de variables no necesarias
base2 <- dplyr::select(bd_unif,-X,-Y,-BARRIO,-COMUNA,-DIRECCION.ENCASILLADA,-CBML,-TEMP_CBML,-TEMP2_CBML,-FECHA_ACCIDENTES,-EXPEDIENTE,-DISENO)
#Correccion de tildes
base2$NOMBRE_BAR <- iconv(base2$NOMBRE_BAR, from = "UTF-8", to = "ASCII//TRANSLIT")
#separar en dos nuevas variables la longitud y latitud, contenidos en la variables LOCATION
base2 <- separate(base2,LOCATION,c("LONGITUD","LATITUD"),sep=",",convert=TRUE)
#quitamos el "[" del dato
base2$LONGITUD <- substring(base2$LONGITUD, first = 2)
#Eliminar el espacio entre los numeros
base2$LATITUD <- gsub(" ","", base2$LATITUD)
#eliminar el ultimo elemento "]"
base2$LATITUD <- gsub("]","", base2$LATITUD)
#renombraremos las variables
base2 <- plyr::rename(base2,  c("FECHA_ACCIDENTE"="FECHA","NOMBRE_BAR"="BARRIO","NOMBRE_COM"="COMUNA","GRAVEDAD_ACCIDENTE"="GRAVEDAD","CLASE_ACCIDENTE"="CLASE"))
View(base2)
#Lectura de la base de datos
bd <- read.csv("./datos/incidentes_viales.csv", dec=",", header=T,sep=";", enconding="ASCII//TRANSLIT")
#Lectura de la base de datos
bd <- read.csv("./datos/incidentes_viales.csv", dec=",", header=T,sep=";", encoding="ASCII//TRANSLIT")
knitr::opts_chunk$set(echo = TRUE)
# Librerias
library(stringr); library(dplyr); library(rgdal); library(plyr); library(tidyverse); library(kableExtra); library(lubridate); library(ggplot2); library(plotly); library(ggpubr);library(dummies);
library(readxl);library(sf);library(GGally);library(car);library(MLmetrics);library(wordcloud);library(gplots);library(R.utils);library(tm);library(DescTools);library(raster);library(mclust);library(geosphere);library(NbClust);library(factoextra);library(vegan);library(qpcR);library(leaflet)
#Lectura de la base de datos
bd <- read.csv("./datos/incidentes_viales.csv", dec=",", header=T,sep=";", encoding="ASCII//TRANSLIT")
View(bd)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Librerias
library(stringr); library(dplyr); library(rgdal); library(plyr); library(tidyverse); library(kableExtra); library(lubridate); library(ggplot2); library(plotly); library(ggpubr);library(dummies);
library(readxl);library(sf);library(GGally);library(car);library(MLmetrics);library(wordcloud);library(gplots);library(R.utils);library(tm);library(DescTools);library(raster);library(mclust);library(geosphere);library(NbClust);library(factoextra);library(vegan);library(qpcR);library(leaflet)
#Lectura de la base de datos
bd <- read.csv("./datos/incidentes_viales.csv", dec=",", header=T,sep=";")
View(bd)
knitr::opts_chunk$set(echo = TRUE)
head(base,n=5)
knitr::opts_chunk$set(echo = TRUE)
# Librerias
library(stringr); library(dplyr); library(rgdal); library(plyr); library(tidyverse); library(kableExtra); library(lubridate); library(ggplot2); library(plotly); library(ggpubr);library(dummies);
library(readxl);library(sf);library(GGally);library(car);library(MLmetrics);library(wordcloud);library(gplots);library(R.utils);library(tm);library(DescTools);library(raster);library(mclust);library(geosphere);library(NbClust);library(factoextra);library(vegan);library(qpcR);library(leaflet)
#Lectura de la base de datos
bd <- read.csv("./datos/incidentes_viales.csv", dec=",", header=T,sep=";")
View(bd)
#Mostramos las primeras 5 observaciones de la base de datos
head(bd,n=5)
#Se cambia el formata de la fecha del accidente
bd$FECHA_ACCIDENTE <- as.Date(bd$FECHA_ACCIDENTE, format="%d/%m/%Y")
#Revisamos que variables contienen valores vacios
colSums(is.na(bd)|bd=="")
# reemplazamos los datos vacios de la variable CLASE_ACCIDENTE
#Cambiar los datos vacios por "otro".
bd$CLASE_ACCIDENTE <- ifelse(bd$CLASE_ACCIDENTE == "","Otro",bd$CLASE_ACCIDENTE)
#Correcion de tildes
bd$CLASE_ACCIDENTE <- iconv(bd$CLASE_ACCIDENTE, from = "UTF-8", to = "ASCII//TRANSLIT")
# Cambiar datos vacios de la variable DISENO
#Cambiar datos vacios por "no especificado"
bd$DISENO <- ifelse(bd$DISENO == "","otro",bd$DISENO)
#Correccion de tildes
bd$DISENO <- iconv(bd$DISENO, from = "UTF-8",to="ASCII//TRANSLIT")
#Creamos una nueva variables que contiene el dia de la semana en que ocurrio el accidente
bd$DIA_SEMANA <- format(bd$FECHA_ACCIDENTE, format="%A")
#Creamos una nueva variables la cual contiene la hora del accidente
bd$HORA_ACCIDENTE <- substr(bd$FECHA_ACCIDENTES,start = 12 ,stop = 19)
catastro <- rgdal::readOGR(dsn = "./datos/Catastro_gdb.shp", layer = "Catastro_gdb")
#quitamos los 962 datos de CBML que están errados ---> quedan 269803
bd <- bd[-which(bd$CBML %in% c("AUC1","AUC2","Inst_14","Inst_16","Inst_18","Inst_19","Sin Inf","SN01")),]
#Creamos un nueva columna llamada CB en bd que solo deja los primeros 4 digitos de CBML para buscarlos en la bd de catastro y traer la comuna y el barrio de los que estén vacios.
bd <- mutate(bd, TEMP_CBML = str_sub(CBML,1,4))
#agregando un cero adelante a los TEMP_CBML y creando una nueva columna --> TEMP2_CBML
bd <- mutate(bd, TEMP2_CBML=ifelse(nchar(TEMP_CBML)==3,paste0("0", TEMP_CBML),TEMP_CBML),TEMP_CBML)
colnames(bd)#nombres de columnas
#base unificada
bd <- inner_join(bd, dplyr::select(catastro@data,CODIGO,NOMBRE_COM,NOMBRE_BAR),
by = c("TEMP2_CBML" = "CODIGO")) #quedan 254009 datos
#Quitar repetidos por el inner_join
bd <- bd %>%     #convirtiendo en factor para ver mejor los únicos
mutate(NRO_RADICADO = as.factor(NRO_RADICADO))
radicados_duplicados <- bd$NRO_RADICADO[duplicated(bd$NRO_RADICADO)]
radicados_duplicados  #verificar duplicados
registros_rad_dup <- bd %>%
filter(NRO_RADICADO %in% radicados_duplicados) %>%  #
arrange(NRO_RADICADO)
#registros_rad_dup
bd_unif <- bd %>%
filter(!(NRO_RADICADO %in% radicados_duplicados))
#246417 observaciones únicas
#Eliminacion de variables no necesarias
base2 <- dplyr::select(bd_unif,-X,-Y,-BARRIO,-COMUNA,-DIRECCION.ENCASILLADA,-CBML,-TEMP_CBML,-TEMP2_CBML,-FECHA_ACCIDENTES,-EXPEDIENTE,-DISENO)
#Eliminacion de variables no necesarias
base2 <- dplyr::select(bd_unif,-X,-Y,-BARRIO,-COMUNA,-DIRECCION.ENCASILLADA,-CBML,-TEMP_CBML,-TEMP2_CBML,-FECHA_ACCIDENTES,-EXPEDIENTE)
catastro <- rgdal::readOGR(dsn = "./datos/Catastro_gdb.shp", layer = "Catastro_gdb")
#quitamos los 962 datos de CBML que están errados ---> quedan 269803
bd <- bd[-which(bd$CBML %in% c("AUC1","AUC2","Inst_14","Inst_16","Inst_18","Inst_19","Sin Inf","SN01")),]
#Creamos un nueva columna llamada CB en bd que solo deja los primeros 4 digitos de CBML para buscarlos en la bd de catastro y traer la comuna y el barrio de los que estén vacios.
bd <- mutate(bd, TEMP_CBML = str_sub(CBML,1,4))
#agregando un cero adelante a los TEMP_CBML y creando una nueva columna --> TEMP2_CBML
bd <- mutate(bd, TEMP2_CBML=ifelse(nchar(TEMP_CBML)==3,paste0("0", TEMP_CBML),TEMP_CBML),TEMP_CBML)
colnames(bd)#nombres de columnas
#base unificada
bd <- inner_join(bd, dplyr::select(catastro@data,CODIGO,NOMBRE_COM,NOMBRE_BAR),
by = c("TEMP2_CBML" = "CODIGO")) #quedan 254009 datos
knitr::opts_chunk$set(echo = TRUE)
# Librerias
library(stringr); library(dplyr); library(rgdal); library(plyr); library(tidyverse); library(kableExtra); library(lubridate); library(ggplot2); library(plotly); library(ggpubr);library(dummies);
library(readxl);library(sf);library(GGally);library(car);library(MLmetrics);library(wordcloud);library(gplots);library(R.utils);library(tm);library(DescTools);library(raster);library(mclust);library(geosphere);library(NbClust);library(factoextra);library(vegan);library(qpcR);library(leaflet)
#Lectura de la base de datos
bd <- read.csv("./datos/incidentes_viales.csv", dec=",", header=T,sep=";")
#Mostramos las primeras 5 observaciones de la base de datos
head(bd,n=5)
#Se cambia el formata de la fecha del accidente
bd$FECHA_ACCIDENTE <- as.Date(bd$FECHA_ACCIDENTE, format="%d/%m/%Y")
#Revisamos que variables contienen valores vacios
colSums(is.na(bd)|bd=="")
# reemplazamos los datos vacios de la variable CLASE_ACCIDENTE
#Cambiar los datos vacios por "otro".
bd$CLASE_ACCIDENTE <- ifelse(bd$CLASE_ACCIDENTE == "","Otro",bd$CLASE_ACCIDENTE)
#Correcion de tildes
bd$CLASE_ACCIDENTE <- iconv(bd$CLASE_ACCIDENTE, from = "UTF-8", to = "ASCII//TRANSLIT")
# Cambiar datos vacios de la variable DISENO
#Cambiar datos vacios por "no especificado"
bd$DISENO <- ifelse(bd$DISENO == "","otro",bd$DISENO)
#Correccion de tildes
bd$DISENO <- iconv(bd$DISENO, from = "UTF-8",to="ASCII//TRANSLIT")
#Creamos una nueva variables que contiene el dia de la semana en que ocurrio el accidente
bd$DIA_SEMANA <- format(bd$FECHA_ACCIDENTE, format="%A")
#Creamos una nueva variables la cual contiene la hora del accidente
bd$HORA_ACCIDENTE <- substr(bd$FECHA_ACCIDENTES,start = 12 ,stop = 19)
catastro <- rgdal::readOGR(dsn = "./datos/Catastro_gdb.shp", layer = "Catastro_gdb")
#quitamos los 962 datos de CBML que están errados ---> quedan 269803
bd <- bd[-which(bd$CBML %in% c("AUC1","AUC2","Inst_14","Inst_16","Inst_18","Inst_19","Sin Inf","SN01")),]
#Creamos un nueva columna llamada CB en bd que solo deja los primeros 4 digitos de CBML para buscarlos en la bd de catastro y traer la comuna y el barrio de los que estén vacios.
bd <- mutate(bd, TEMP_CBML = str_sub(CBML,1,4))
#agregando un cero adelante a los TEMP_CBML y creando una nueva columna --> TEMP2_CBML
bd <- mutate(bd, TEMP2_CBML=ifelse(nchar(TEMP_CBML)==3,paste0("0", TEMP_CBML),TEMP_CBML),TEMP_CBML)
colnames(bd)#nombres de columnas
#base unificada
bd <- inner_join(bd, dplyr::select(catastro@data,CODIGO,NOMBRE_COM,NOMBRE_BAR),
by = c("TEMP2_CBML" = "CODIGO")) #quedan 254009 datos
#Quitar repetidos por el inner_join
bd <- bd %>%     #convirtiendo en factor para ver mejor los únicos
mutate(NRO_RADICADO = as.factor(NRO_RADICADO))
radicados_duplicados <- bd$NRO_RADICADO[duplicated(bd$NRO_RADICADO)]
radicados_duplicados  #verificar duplicados
registros_rad_dup <- bd %>%
filter(NRO_RADICADO %in% radicados_duplicados) %>%  #
arrange(NRO_RADICADO)
#registros_rad_dup
bd_unif <- bd %>%
filter(!(NRO_RADICADO %in% radicados_duplicados))
#246417 observaciones únicas
#Eliminacion de variables no necesarias
base2 <- dplyr::select(bd_unif,-X,-Y,-BARRIO,-COMUNA,-DIRECCION.ENCASILLADA,-CBML,-TEMP_CBML,-TEMP2_CBML,-FECHA_ACCIDENTES,-EXPEDIENTE)
#Correccion de tildes
base2$NOMBRE_BAR <- iconv(base2$NOMBRE_BAR, from = "UTF-8", to = "ASCII//TRANSLIT")
#separar en dos nuevas variables la longitud y latitud, contenidos en la variables LOCATION
base2 <- separate(base2,LOCATION,c("LONGITUD","LATITUD"),sep=",",convert=TRUE)
#quitamos el "[" del dato
base2$LONGITUD <- substring(base2$LONGITUD, first = 2)
#Eliminar el espacio entre los numeros
base2$LATITUD <- gsub(" ","", base2$LATITUD)
#eliminar el ultimo elemento "]"
base2$LATITUD <- gsub("]","", base2$LATITUD)
#renombraremos las variables
base2 <- plyr::rename(base2,  c("FECHA_ACCIDENTE"="FECHA","NOMBRE_BAR"="BARRIO","NOMBRE_COM"="COMUNA","GRAVEDAD_ACCIDENTE"="GRAVEDAD","CLASE_ACCIDENTE"="CLASE"))
#EJECUTAR SOLO PARA CREAR EL CSV NUEVO
#write.csv(base2,"./datos/base_depurada.csv",fileEncoding = "UTF-8")
#renombraremos las variables
base2 <- plyr::rename(base2,  c("FECHA_ACCIDENTE"="FECHA","NOMBRE_BAR"="BARRIO","NOMBRE_COM"="COMUNA","GRAVEDAD_ACCIDENTE"="GRAVEDAD","CLASE_ACCIDENTE"="CLASE","ANO"="AÑO","DISENO"="DISEÑO"))
View(base2)
#renombraremos las variables
base2 <- plyr::rename(base2,  c("FECHA_ACCIDENTE"="FECHA","NOMBRE_BAR"="BARRIO","NOMBRE_COM"="COMUNA","GRAVEDAD_ACCIDENTE"="GRAVEDAD","CLASE_ACCIDENTE"="CLASE"))
#renombraremos las variables
base2 <- plyr::rename(base2,  c("FECHA_ACCIDENTE"="FECHA","NOMBRE_BAR"="BARRIO","NOMBRE_COM"="COMUNA","GRAVEDAD_ACCIDENTE"="GRAVEDAD","CLASE_ACCIDENTE"="CLASE","AÑO"="ANO","DISEÑO"="DISENO"))
knitr::opts_chunk$set(echo = TRUE)
# Librerias
library(stringr); library(dplyr); library(rgdal); library(plyr); library(tidyverse); library(kableExtra); library(lubridate); library(ggplot2); library(plotly); library(ggpubr);library(dummies);
library(readxl);library(sf);library(GGally);library(car);library(MLmetrics);library(wordcloud);library(gplots);library(R.utils);library(tm);library(DescTools);library(raster);library(mclust);library(geosphere);library(NbClust);library(factoextra);library(vegan);library(qpcR);library(leaflet)
#Lectura de la base de datos
bd <- read.csv("./datos/incidentes_viales.csv", dec=",", header=T,sep=";")
#Mostramos las primeras 5 observaciones de la base de datos
head(bd,n=5)
#Se cambia el formata de la fecha del accidente
bd$FECHA_ACCIDENTE <- as.Date(bd$FECHA_ACCIDENTE, format="%d/%m/%Y")
#Revisamos que variables contienen valores vacios
colSums(is.na(bd)|bd=="")
# reemplazamos los datos vacios de la variable CLASE_ACCIDENTE
#Cambiar los datos vacios por "otro".
bd$CLASE_ACCIDENTE <- ifelse(bd$CLASE_ACCIDENTE == "","Otro",bd$CLASE_ACCIDENTE)
#Correcion de tildes
bd$CLASE_ACCIDENTE <- iconv(bd$CLASE_ACCIDENTE, from = "UTF-8", to = "ASCII//TRANSLIT")
# Cambiar datos vacios de la variable DISENO
#Cambiar datos vacios por "no especificado"
bd$DISENO <- ifelse(bd$DISENO == "","otro",bd$DISENO)
#Correccion de tildes
bd$DISENO <- iconv(bd$DISENO, from = "UTF-8",to="ASCII//TRANSLIT")
#Creamos una nueva variables que contiene el dia de la semana en que ocurrio el accidente
bd$DIA_SEMANA <- format(bd$FECHA_ACCIDENTE, format="%A")
#Creamos una nueva variables la cual contiene la hora del accidente
bd$HORA_ACCIDENTE <- substr(bd$FECHA_ACCIDENTES,start = 12 ,stop = 19)
catastro <- rgdal::readOGR(dsn = "./datos/Catastro_gdb.shp", layer = "Catastro_gdb")
#quitamos los 962 datos de CBML que están errados ---> quedan 269803
bd <- bd[-which(bd$CBML %in% c("AUC1","AUC2","Inst_14","Inst_16","Inst_18","Inst_19","Sin Inf","SN01")),]
#Creamos un nueva columna llamada CB en bd que solo deja los primeros 4 digitos de CBML para buscarlos en la bd de catastro y traer la comuna y el barrio de los que estén vacios.
bd <- mutate(bd, TEMP_CBML = str_sub(CBML,1,4))
#agregando un cero adelante a los TEMP_CBML y creando una nueva columna --> TEMP2_CBML
bd <- mutate(bd, TEMP2_CBML=ifelse(nchar(TEMP_CBML)==3,paste0("0", TEMP_CBML),TEMP_CBML),TEMP_CBML)
colnames(bd)#nombres de columnas
#base unificada
bd <- inner_join(bd, dplyr::select(catastro@data,CODIGO,NOMBRE_COM,NOMBRE_BAR),
by = c("TEMP2_CBML" = "CODIGO")) #quedan 254009 datos
#Quitar repetidos por el inner_join
bd <- bd %>%     #convirtiendo en factor para ver mejor los únicos
mutate(NRO_RADICADO = as.factor(NRO_RADICADO))
radicados_duplicados <- bd$NRO_RADICADO[duplicated(bd$NRO_RADICADO)]
radicados_duplicados  #verificar duplicados
registros_rad_dup <- bd %>%
filter(NRO_RADICADO %in% radicados_duplicados) %>%  #
arrange(NRO_RADICADO)
#registros_rad_dup
bd_unif <- bd %>%
filter(!(NRO_RADICADO %in% radicados_duplicados))
#246417 observaciones únicas
#Eliminacion de variables no necesarias
base2 <- dplyr::select(bd_unif,-X,-Y,-BARRIO,-COMUNA,-DIRECCION.ENCASILLADA,-CBML,-TEMP_CBML,-TEMP2_CBML,-FECHA_ACCIDENTES,-EXPEDIENTE)
#Correccion de tildes
base2$NOMBRE_BAR <- iconv(base2$NOMBRE_BAR, from = "UTF-8", to = "ASCII//TRANSLIT")
#separar en dos nuevas variables la longitud y latitud, contenidos en la variables LOCATION
base2 <- separate(base2,LOCATION,c("LONGITUD","LATITUD"),sep=",",convert=TRUE)
#quitamos el "[" del dato
base2$LONGITUD <- substring(base2$LONGITUD, first = 2)
#Eliminar el espacio entre los numeros
base2$LATITUD <- gsub(" ","", base2$LATITUD)
#eliminar el ultimo elemento "]"
base2$LATITUD <- gsub("]","", base2$LATITUD)
#renombraremos las variables
base2 <- plyr::rename(base2,  c("FECHA_ACCIDENTE"="FECHA","NOMBRE_BAR"="BARRIO","NOMBRE_COM"="COMUNA","GRAVEDAD_ACCIDENTE"="GRAVEDAD","CLASE_ACCIDENTE"="CLASE"))
#EJECUTAR SOLO PARA CREAR EL CSV NUEVO
#write.csv(base2,"./datos/base_depurada.csv",fileEncoding = "UTF-8")
View(base2)
#Eliminacion de variables no necesarias
base2 <- dplyr::select(bd_unif,-X,-Y,-BARRIO,-COMUNA,-DIRECCION.ENCASILLADA,-CBML,-TEMP_CBML,-TEMP2_CBML,-FECHA_ACCIDENTES,-EXPEDIENTE,-NRO_RADICADO)
knitr::opts_chunk$set(echo = TRUE)
# Librerias
library(stringr); library(dplyr); library(rgdal); library(plyr); library(tidyverse); library(kableExtra); library(lubridate); library(ggplot2); library(plotly); library(ggpubr);library(dummies);
library(readxl);library(sf);library(GGally);library(car);library(MLmetrics);library(wordcloud);library(gplots);library(R.utils);library(tm);library(DescTools);library(raster);library(mclust);library(geosphere);library(NbClust);library(factoextra);library(vegan);library(qpcR);library(leaflet)
#Lectura de la base de datos
bd <- read.csv("./datos/incidentes_viales.csv", dec=",", header=T,sep=";")
#Mostramos las primeras 5 observaciones de la base de datos
head(bd,n=5)
#Se cambia el formata de la fecha del accidente
bd$FECHA_ACCIDENTE <- as.Date(bd$FECHA_ACCIDENTE, format="%d/%m/%Y")
#Revisamos que variables contienen valores vacios
colSums(is.na(bd)|bd=="")
# reemplazamos los datos vacios de la variable CLASE_ACCIDENTE
#Cambiar los datos vacios por "otro".
bd$CLASE_ACCIDENTE <- ifelse(bd$CLASE_ACCIDENTE == "","Otro",bd$CLASE_ACCIDENTE)
#Correcion de tildes
bd$CLASE_ACCIDENTE <- iconv(bd$CLASE_ACCIDENTE, from = "UTF-8", to = "ASCII//TRANSLIT")
# Cambiar datos vacios de la variable DISENO
#Cambiar datos vacios por "no especificado"
bd$DISENO <- ifelse(bd$DISENO == "","otro",bd$DISENO)
#Correccion de tildes
bd$DISENO <- iconv(bd$DISENO, from = "UTF-8",to="ASCII//TRANSLIT")
#Creamos una nueva variables que contiene el dia de la semana en que ocurrio el accidente
bd$DIA_SEMANA <- format(bd$FECHA_ACCIDENTE, format="%A")
#Creamos una nueva variables la cual contiene la hora del accidente
bd$HORA_ACCIDENTE <- substr(bd$FECHA_ACCIDENTES,start = 12 ,stop = 19)
catastro <- rgdal::readOGR(dsn = "./datos/Catastro_gdb.shp", layer = "Catastro_gdb")
#quitamos los 962 datos de CBML que están errados ---> quedan 269803
bd <- bd[-which(bd$CBML %in% c("AUC1","AUC2","Inst_14","Inst_16","Inst_18","Inst_19","Sin Inf","SN01")),]
#Creamos un nueva columna llamada CB en bd que solo deja los primeros 4 digitos de CBML para buscarlos en la bd de catastro y traer la comuna y el barrio de los que estén vacios.
bd <- mutate(bd, TEMP_CBML = str_sub(CBML,1,4))
#agregando un cero adelante a los TEMP_CBML y creando una nueva columna --> TEMP2_CBML
bd <- mutate(bd, TEMP2_CBML=ifelse(nchar(TEMP_CBML)==3,paste0("0", TEMP_CBML),TEMP_CBML),TEMP_CBML)
colnames(bd)#nombres de columnas
#base unificada
bd <- inner_join(bd, dplyr::select(catastro@data,CODIGO,NOMBRE_COM,NOMBRE_BAR),
by = c("TEMP2_CBML" = "CODIGO")) #quedan 254009 datos
#Quitar repetidos por el inner_join
bd <- bd %>%     #convirtiendo en factor para ver mejor los únicos
mutate(NRO_RADICADO = as.factor(NRO_RADICADO))
radicados_duplicados <- bd$NRO_RADICADO[duplicated(bd$NRO_RADICADO)]
radicados_duplicados  #verificar duplicados
registros_rad_dup <- bd %>%
filter(NRO_RADICADO %in% radicados_duplicados) %>%  #
arrange(NRO_RADICADO)
#registros_rad_dup
bd_unif <- bd %>%
filter(!(NRO_RADICADO %in% radicados_duplicados))
#246417 observaciones únicas
#Eliminacion de variables no necesarias
base2 <- dplyr::select(bd_unif,-X,-Y,-BARRIO,-COMUNA,-DIRECCION.ENCASILLADA,-CBML,-TEMP_CBML,-TEMP2_CBML,-FECHA_ACCIDENTES,-EXPEDIENTE,-NRO_RADICADO)
#Correccion de tildes
base2$NOMBRE_BAR <- iconv(base2$NOMBRE_BAR, from = "UTF-8", to = "ASCII//TRANSLIT")
#separar en dos nuevas variables la longitud y latitud, contenidos en la variables LOCATION
base2 <- separate(base2,LOCATION,c("LONGITUD","LATITUD"),sep=",",convert=TRUE)
#quitamos el "[" del dato
base2$LONGITUD <- substring(base2$LONGITUD, first = 2)
#Eliminar el espacio entre los numeros
base2$LATITUD <- gsub(" ","", base2$LATITUD)
#eliminar el ultimo elemento "]"
base2$LATITUD <- gsub("]","", base2$LATITUD)
#renombraremos las variables
base2 <- plyr::rename(base2,  c("FECHA_ACCIDENTE"="FECHA","NOMBRE_BAR"="BARRIO","NOMBRE_COM"="COMUNA","GRAVEDAD_ACCIDENTE"="GRAVEDAD","CLASE_ACCIDENTE"="CLASE"))
#EJECUTAR SOLO PARA CREAR EL CSV NUEVO
#write.csv(base2,"./datos/base_depurada.csv",fileEncoding = "UTF-8")
View(base2)
#EJECUTAR SOLO PARA CREAR EL CSV NUEVO
write.csv(base2,"./datos/base_depurada.csv",fileEncoding = "UTF-8")
