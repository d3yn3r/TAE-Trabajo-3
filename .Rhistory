bd <- inner_join(bd, dplyr::select(catastro@data,CODIGO,NOMBRE_COM,NOMBRE_BAR),
by = c("TEMP2_CBML" = "CODIGO")) #quedan 254009 datos
#Quitar repetidos por el inner_join
bd <- bd %>%     #convirtiendo en factor para ver mejor los únicos
mutate(NRO_RADICADO = as.factor(NRO_RADICADO))
radicados_duplicados <- bd$NRO_RADICADO[duplicated(bd$NRO_RADICADO)]
radicados_duplicados  #verificar duplicados
registros_rad_dup <- bd %>%
filter(NRO_RADICADO %in% radicados_duplicados) %>%  #
arrange(NRO_RADICADO)
#registros_rad_dup
bd_unif <- bd %>%
filter(!(NRO_RADICADO %in% radicados_duplicados))
#246417 observaciones únicas
#Eliminacion de variables no necesarias
base2 <- dplyr::select(bd_unif,-X,-Y,-BARRIO,-COMUNA,-DIRECCION.ENCASILLADA,-CBML,-TEMP_CBML,-TEMP2_CBML,-FECHA_ACCIDENTES,-EXPEDIENTE,-NRO_RADICADO)
#Correccion de tildes
base2$NOMBRE_BAR <- iconv(base2$NOMBRE_BAR, from = "UTF-8", to = "ASCII//TRANSLIT")
#separar en dos nuevas variables la longitud y latitud, contenidos en la variables LOCATION
base2 <- separate(base2,LOCATION,c("LONGITUD","LATITUD"),sep=",",convert=TRUE)
#quitamos el "[" del dato
base2$LONGITUD <- substring(base2$LONGITUD, first = 2)
#Eliminar el espacio entre los numeros
base2$LATITUD <- gsub(" ","", base2$LATITUD)
#eliminar el ultimo elemento "]"
base2$LATITUD <- gsub("]","", base2$LATITUD)
#renombraremos las variables
base2 <- plyr::rename(base2,  c("FECHA_ACCIDENTE"="FECHA","NOMBRE_BAR"="BARRIO","NOMBRE_COM"="COMUNA","GRAVEDAD_ACCIDENTE"="GRAVEDAD","CLASE_ACCIDENTE"="CLASE"))
fechas_especiales <- read.csv("./datos/dias_festivos.csv", sep = ",", header = T)
class(fechas_especiales$FECHA)
fechas_especiales$FECHA <- as.Date(fechas_especiales$FECHA, format="%d/%m/%Y")
class(fechas_especiales$FECHA)
#unimos las fechas especiales a la base de datos
base2 <- merge(x = base2, y = fechas_especiales, by = "FECHA", all.x = T)
base2$FESTIVIDAD <- ifelse(is.na(base2$FESTIVIDAD),"NO","SI")
base2$FESTIVIDAD <- as.factor(base2$FESTIVIDAD)
summary(base2$FESTIVIDAD)
#agregando semana
base2 <- mutate(base2, SEMANA=as.factor(week(base2$FECHA)))
base2$SEMANA <- as.factor(base2$SEMANA)
#Tipo de festividad
fechas_especiales2 <- read.csv("./datos/dias_festivos_2.csv",
sep = ",",
header = T)
#convertir a date
fechas_especiales2$FECHA <- as.Date(fechas_especiales2$FECHA, format="%d/%m/%Y")#año,mes,dia
class(base2$FECHA)
class(fechas_especiales2$FECHA)
base2 <- left_join(base2, dplyr::select(fechas_especiales2,FECHA,TIPO_FESTIVIDAD),
by = c("FECHA" = "FECHA"))
base2$TIPO_FESTIVIDAD <- factor(base2$TIPO_FESTIVIDAD, levels = c("A_NUEVO","BRUJAS","FESTIVO","MADRES","NAVIDAD","SEM_SANTA","No_festivo"))
base2$TIPO_FESTIVIDAD[is.na(base2$TIPO_FESTIVIDAD)] <- "No_festivo"
base2$TIPO_FESTIVIDAD <- as.factor(base2$TIPO_FESTIVIDAD)
#EJECUTAR SOLO PARA CREAR EL CSV NUEVO
#write.csv(base2,"./datos/base_depurada.csv",fileEncoding = "UTF-8")
head(base2,n=5)
bd_final <-read.csv("./datos/base_depurada3.csv")
#bd_final$DIA_SEMANA <- iconv(bd_final$DIA_SEMANA, from = "UTF-8", to = "ASCII//TRANSLIT")
accidentes_mes_ano <- bd_final %>% group_by(FECHA) %>%
dplyr::summarize(numero_de_accidentes = n())
accidentes_mes_ano$ano <- year(accidentes_mes_ano$FECHA)
accidentes_mes_ano$mes <- month(accidentes_mes_ano$FECHA)
aggregate(numero_de_accidentes~ano*mes, data = accidentes_mes_ano, FUN = mean) %>%
plot_ly(x = ~mes,
y = ~numero_de_accidentes, type = "scatter", mode = "lines+markers",
split = ~ano, line = list(width = 1.5)) %>%
layout(title = 'Promedio accidentes mensuales por año',
xaxis = list(title = "Mes"),
yaxis = list(title = "Número de accidentes"))
accidentes_semana <- bd_final %>%
group_by(DIA_SEMANA) %>%
summarise(numero_de_accidentes = n())
accidentes_semana$DIA_SEMANA <- ordered(accidentes_semana$DIA_SEMANA, levels = c("lunes","martes","miercoles","jueves","viernes","sabado","domingo"))
grafico_dia_semana <- ggplot(accidentes_semana, aes(fill = DIA_SEMANA, x = DIA_SEMANA, y = numero_de_accidentes)) +
geom_bar(stat = "identity") +
geom_text(aes(y = numero_de_accidentes, label = numero_de_accidentes), vjust = -0.5) +
xlab("Día") +
ylab("Número de accidentes ") +
ggtitle("Número de accidentes por día de la semana") +
ylim(c(0,45000)) +
theme(plot.title = element_text(hjust = 0.5))+
guides(fill = guide_legend(title = "Día de la semana"))+
scale_fill_brewer(palette = "Set2")
grafico_dia_semana
accidentes_mes <- bd_final %>%
group_by(MES) %>%
summarise(numero_de_accidentes = n())
accidentes_mes$MES <- gsub("1","Enero",accidentes_mes$MES)
accidentes_mes$MES <- gsub("2","Febrero",accidentes_mes$MES)
accidentes_mes$MES <- gsub("3","Marzo",accidentes_mes$MES)
accidentes_mes$MES <- gsub("4","Abril",accidentes_mes$MES)
accidentes_mes$MES <- gsub("5","Mayo",accidentes_mes$MES)
accidentes_mes$MES <- gsub("6","Junio",accidentes_mes$MES)
accidentes_mes$MES <- gsub("7","Julio",accidentes_mes$MES)
accidentes_mes$MES <- gsub("8","Agosto",accidentes_mes$MES)
accidentes_mes$MES <- gsub("9","Septiembre",accidentes_mes$MES)
accidentes_mes$MES <- gsub("Enero0","Octubre",accidentes_mes$MES)
accidentes_mes$MES <- gsub("EneroEnero","Noviembre",accidentes_mes$MES)
accidentes_mes$MES <- gsub("EneroFebrero","Diciembre",accidentes_mes$MES)
accidentes_mes$MES <- ordered(accidentes_mes$MES, levels = c("Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre"))
ggplot(data = accidentes_mes, aes(fill=MES, x = MES, y = numero_de_accidentes)) +
geom_bar(stat = "identity") +
scale_fill_hue() +
geom_text(aes(y = numero_de_accidentes, label = numero_de_accidentes), vjust = -0.5) +
xlab("Mes") +
ylab("Número de accidentes") +
ylim(c(0,26000)) +
ggtitle("Número de accidentes por mes")+
theme(plot.title = element_text(hjust = 0.5),axis.text.x = element_text(angle = 90, hjust = 0))
accidente_año <- table(bd_final$ANO) %>%
as.data.frame()
ggplot(data = accidente_año, aes(fill = Var1, x = Var1, y = Freq)) +
geom_bar(stat = "identity") +
geom_text(aes(y = Freq, label = Freq), vjust = -0.5) +
scale_fill_brewer(palette = "Set2") +
xlab("Año") +
ylab("Número de accidentes") +
ylim(c(0,50000)) +
ggtitle("Número de accidentes por año")+
theme(plot.title = element_text(hjust = 0.5))+
guides(fill = guide_legend(title = "Año"))
accidentes_comuna <- bd_final %>%
group_by(COMUNA) %>%
dplyr::summarize(numero_de_accidentes = n())
ggplot(data = accidentes_comuna, aes( fill = COMUNA, x = reorder(COMUNA,+numero_de_accidentes), y = numero_de_accidentes)) +
geom_bar(stat = "identity") +
scale_fill_viridis_d( option = "C") +
geom_text(aes(y = numero_de_accidentes, label = numero_de_accidentes), hjust = -0.1) +
xlab("Comuna") +
ylab("Número de accidentes") +
ggtitle("Número de accidentes por comuna") +
ylim(c(0,60000)) +
coord_flip() +
theme(plot.title = element_text(hjust = 0.5),legend.position = "none")
accidentes_clase <- bd_final %>%
group_by(CLASE) %>%
summarise(numero_de_accidentes = n())
ggplot(data = accidentes_clase, aes(fill = CLASE, x = CLASE, y = numero_de_accidentes)) +
geom_bar(stat = "identity") +
geom_text(aes(y = numero_de_accidentes, label = numero_de_accidentes), vjust = -0.5) +
xlab("Gravedad") +
ylab("Número de acccidentes") +
ggtitle("Número de accidentes por clase") +
ylim(c(0,170000))+
theme(plot.title = element_text(hjust = 0.5),legend.position = "none")
accidentes_gravedad <- bd_final %>%
group_by(GRAVEDAD) %>%
summarise(numero_de_accidentes = n())
ggplot(data = accidentes_gravedad, aes(fill = GRAVEDAD, x = GRAVEDAD, y = numero_de_accidentes)) +
geom_bar(stat = "identity") +
geom_text(aes(y = numero_de_accidentes, label = numero_de_accidentes), vjust = -0.5) +
xlab("Gravedad") +
ylab("Número de acccidentes") +
ggtitle("Número de accidentes por gravedad") +
ylim(c(0,150000))+
theme(plot.title = element_text(hjust = 0.5),legend.position = "none")
accidentes_tipo_festividad <- bd_final %>%
group_by(TIPO_FESTIVIDAD) %>%
summarise(numero_de_accidentes = n())
accidentes_tipo_festividad <- accidentes_tipo_festividad[c(1,2,4,5,6),]
accidentes_tipo_festividad$TIPO_FESTIVIDAD <- gsub("A_NUEVO","AÑO NUEVO",accidentes_tipo_festividad$TIPO_FESTIVIDAD)
accidentes_tipo_festividad$TIPO_FESTIVIDAD <- gsub("SEM_SANTA","SEMANA SANTA",accidentes_tipo_festividad$TIPO_FESTIVIDAD)
accidentes_tipo_festividad$TIPO_FESTIVIDAD <- gsub("MADRES","DIA DE LAS MADRES",accidentes_tipo_festividad$TIPO_FESTIVIDAD)
accidentes_tipo_festividad$TIPO_FESTIVIDAD <- gsub("BRUJAS","HALLOWEEN",accidentes_tipo_festividad$TIPO_FESTIVIDAD)
ggplot(data = accidentes_tipo_festividad, aes(fill = TIPO_FESTIVIDAD, x = TIPO_FESTIVIDAD, y = numero_de_accidentes)) +
geom_bar(stat = "identity") +
geom_text(aes(y = numero_de_accidentes, label = numero_de_accidentes), vjust = -0.5) +
xlab("Tipo de festividad") +
ylab("Número de acccidentes") +
ggtitle("Número de accidentes por tipo de festividad") +
ylim(c(0,5000))+
theme(plot.title = element_text(hjust = 0.5),legend.position = "none")
accidentes_festividad <- bd_final %>%
group_by(FESTIVIDAD) %>%
summarise(numero_de_accidentes = n())
ggplot(data = accidentes_festividad, aes(fill = FESTIVIDAD, x = FESTIVIDAD, y = numero_de_accidentes)) +
geom_bar(stat = "identity") +
geom_text(aes(y = numero_de_accidentes, label = numero_de_accidentes), vjust = -0.5) +
xlab("Festivo") +
ylab("Número de acccidentes") +
ggtitle("Número de accidentes en días feriados") +
ylim(c(0,250000))+
theme(plot.title = element_text(hjust = 0.5),legend.position = "none")
# Lectura de la base de datos
bd_depurada <- read.csv("./datos/base_depurada.csv", dec=".", header=T,sep=",")
bd_depurada$CLASE <- as.factor(as.character(bd_depurada$CLASE))
# Division en train y val
datos_val_2019 <- subset(bd_depurada, (ANO == '2019'))
datos_val_2020 <- subset(bd_depurada, (ANO == '2020'))
base_train <- subset(bd_depurada, (ANO != '2019' & ANO != '2020'))
#Modelo lineal
datos_lm1_tr <- base_train %>% group_by(FECHA, FESTIVIDAD,
DIA_SEMANA) %>% count(name = "NRO_ACCID")
# lm1 <- lm(NRO_ACCID ~ FESTIVIDAD+DIA_SEMANA, data = datos_lm1_tr)
lm1 <- glm(NRO_ACCID ~ FESTIVIDAD+DIA_SEMANA, family = "poisson", data = datos_lm1_tr)
### Evaluación modelo 1
datos_lm1_tr_pred <- datos_lm1_tr[,-c(4)]
predicted <- round(predict(lm1, newdata=datos_lm1_tr_pred, type="response"))
actual <- datos_lm1_tr$NRO_ACCID
lm1_tr_mse <- MSE(predicted, actual) # MSE
lm1_tr_mae <- MAE(predicted, actual) # MAE
lm1_tr_r2 <- R2_Score(predicted, actual) # R2
sprintf("MSE: %f, MAE: %f, R2: %f", lm1_tr_mse, lm1_tr_mae, lm1_tr_r2)
datos_lm1_val <- datos_val_2019 %>% group_by(FECHA, FESTIVIDAD,
DIA_SEMANA) %>% count(name = "NRO_ACCID")
datos_lm1_val_pred <- datos_lm1_val[,-c(4)]
predicted <- round(predict(lm1, newdata=datos_lm1_val_pred, type="response"))
actual <- datos_lm1_val$NRO_ACCID
lm1_val_mse <- MSE(predicted, actual) # MSE
lm1_val_mae <- MAE(predicted, actual) # MAE
lm1_val_r2 <- R2_Score(predicted, actual) # R2
sprintf("MSE: %f, MAE: %f, R2: %f", lm1_val_mse, lm1_val_mae, lm1_val_r2)
mae_variation = function(mae_tr, mae_val){
variacion = mae_tr - mae_vl
porcentaje = variacion / mae_tr
porcentaje * 100 * -1
}
mae_tr = lm1_tr_mae
mae_vl = lm1_val_mae
print(mae_variation(mae_tr, mae_val))
datos_lm1_val <- datos_val_2020 %>% group_by(FECHA, FESTIVIDAD,
DIA_SEMANA) %>% count(name = "NRO_ACCID")
datos_lm1_val_pred <- datos_lm1_val[,-c(4)]
predicted <- round(predict(lm1, newdata=datos_lm1_val_pred, type="response"))
actual <- datos_lm1_val$NRO_ACCID
lm1_val_mse <- MSE(predicted, actual) # MSE
lm1_val_mae <- MAE(predicted, actual) # MAE
lm1_val_r2 <- R2_Score(predicted, actual) # R2
sprintf("MSE: %f, MAE: %f, R2: %f", lm1_val_mse, lm1_val_mae, lm1_val_r2)
mae_tr = lm1_tr_mae
mae_vl = lm1_val_mae
print(mae_variation(mae_tr, mae_val))
datos_lm2_tr <- base_train %>% group_by(FECHA, FESTIVIDAD, DIA_SEMANA,
CLASE) %>% count(name = "NRO_ACCID")
# lm2 <- lm(NRO_ACCID ~ FESTIVIDAD+DIA_SEMANA+CLASE,
#            data = datos_lm2_tr)
lm2 <- glm(NRO_ACCID ~ FESTIVIDAD+DIA_SEMANA+CLASE, family = "poisson",
data = datos_lm2_tr)
datos_lm2_tr_pred <- datos_lm2_tr[,-c(5)]
predicted <- round(predict(lm2, newdata=datos_lm2_tr_pred, type="response"))
actual <- datos_lm2_tr$NRO_ACCID
lm2_tr_mse <- MSE(predicted, actual) # MSE
lm2_tr_mae <- MAE(predicted, actual) # MAE
lm2_tr_r2 <- R2_Score(predicted, actual) # R2
sprintf("MSE: %f, MAE: %f, R2: %f", lm2_tr_mse, lm2_tr_mae, lm2_tr_r2)
datos_lm2_val <- datos_val_2019 %>% group_by(FECHA, FESTIVIDAD,
DIA_SEMANA, CLASE) %>% count(name = "NRO_ACCID")
datos_lm2_val_pred <- datos_lm2_val[,-c(5)]
predicted <- round(predict(lm2, newdata=datos_lm2_val_pred, type="response"))
actual <- datos_lm2_val$NRO_ACCID
lm2_val_mse <- MSE(predicted, actual) # MSE
lm2_val_mae <- MAE(predicted, actual) # MAE
lm2_val_r2 <- R2_Score(predicted, actual) # R2
sprintf("MSE: %f, MAE: %f, R2: %f", lm2_val_mse, lm2_val_mae, lm2_val_r2)
mae_tr = lm2_tr_mae
mae_vl = lm2_val_mae
print(mae_variation(mae_tr, mae_val))
datos_lm2_val <- datos_val_2020 %>% group_by(FECHA, FESTIVIDAD,
DIA_SEMANA, CLASE) %>% count(name = "NRO_ACCID")
datos_lm2_val_pred <- datos_lm2_val[,-c(5)]
predicted <- round(predict(lm2, newdata=datos_lm2_val_pred, type="response"))
actual <- datos_lm2_val$NRO_ACCID
lm2_val_mse <- MSE(predicted, actual) # MSE
lm2_val_mae <- MAE(predicted, actual) # MAE
lm2_val_r2 <- R2_Score(predicted, actual) # R2
sprintf("MSE: %f, MAE: %f, R2: %f", lm2_val_mse, lm2_val_mae, lm2_val_r2)
mae_tr = lm2_tr_mae
mae_vl = lm2_val_mae
print(mae_variation(mae_tr, mae_val))
datos_lm3_tr <- base_train %>% group_by(FECHA, FESTIVIDAD, DIA_SEMANA,
DISENO) %>% count(name = "NRO_ACCID")
# lm3 <- lm(NRO_ACCID ~ FESTIVIDAD+DIA_SEMANA+DISENO,
#            data = datos_lm3_tr)
lm3 <- glm(NRO_ACCID ~ FESTIVIDAD+DIA_SEMANA+DISENO, family = "poisson",
data = datos_lm3_tr)
datos_lm3_tr_pred <- datos_lm3_tr[,-c(5)]
predicted <- round(predict(lm3, newdata=datos_lm3_tr_pred, type="response"))
actual <- datos_lm3_tr$NRO_ACCID
lm3_tr_mse <- MSE(predicted, actual) # MSE
lm3_tr_mae <- MAE(predicted, actual) # MAE
lm3_tr_r2 <- R2_Score(predicted, actual) # R2
sprintf("MSE: %f, MAE: %f, R2: %f", lm3_tr_mse, lm3_tr_mae, lm3_tr_r2)
datos_lm3_val <- datos_val_2019 %>% group_by(FECHA, FESTIVIDAD,
DIA_SEMANA, DISENO) %>% count(name = "NRO_ACCID")
datos_lm3_val_pred <- datos_lm3_val[,-c(5)]
predicted <- round(predict(lm3, newdata=datos_lm3_val_pred, type="response"))
actual <- datos_lm3_val$NRO_ACCID
lm3_val_mse <- MSE(predicted, actual) # MSE
lm3_val_mae <- MAE(predicted, actual) # MAE
lm3_val_r2 <- R2_Score(predicted, actual) # R2
sprintf("MSE: %f, MAE: %f, R2: %f", lm3_val_mse, lm3_val_mae, lm3_val_r2)
mae_tr = lm3_tr_mae
mae_vl = lm3_val_mae
print(mae_variation(mae_tr, mae_val))
datos_lm3_val <- datos_val_2020 %>% group_by(FECHA, FESTIVIDAD,
DIA_SEMANA, DISENO) %>% count(name = "NRO_ACCID")
datos_lm3_val_pred <- datos_lm3_val[,-c(5)]
predicted <- round(predict(lm3, newdata=datos_lm3_val_pred, type="response"))
actual <- datos_lm3_val$NRO_ACCID
lm3_val_mse <- MSE(predicted, actual) # MSE
lm3_val_mae <- MAE(predicted, actual) # MAE
lm3_val_r2 <- R2_Score(predicted, actual) # R2
sprintf("MSE: %f, MAE: %f, R2: %f", lm3_val_mse, lm3_val_mae, lm3_val_r2)
mae_tr = lm3_tr_mae
mae_vl = lm3_val_mae
print(mae_variation(mae_tr, mae_val))
datos_lm5_tr <- base_train %>% group_by(FECHA, FESTIVIDAD, DIA_SEMANA,
COMUNA) %>% count(name = "NRO_ACCID")
# lm5 <- lm(NRO_ACCID ~ FESTIVIDAD+DIA_SEMANA+COMUNA,
#            data = datos_lm5_tr)
lm5 <- glm(NRO_ACCID ~ FESTIVIDAD+DIA_SEMANA+COMUNA, family = "poisson",
data = datos_lm5_tr)
datos_lm5_tr_pred <- datos_lm5_tr[,-c(5)]
predicted <- round(predict(lm5, newdata=datos_lm5_tr_pred, type="response"))
actual <- datos_lm5_tr$NRO_ACCID
lm5_tr_mse <- MSE(predicted, actual) # MSE
lm5_tr_mae <- MAE(predicted, actual) # MAE
lm5_tr_r2 <- R2_Score(predicted, actual) # R2
sprintf("MSE: %f, MAE: %f, R2: %f", lm5_tr_mse, lm5_tr_mae, lm5_tr_r2)
datos_lm5_val <- datos_val_2019 %>% group_by(FECHA, FESTIVIDAD,
DIA_SEMANA, COMUNA) %>% count(name = "NRO_ACCID")
datos_lm5_val_pred <- datos_lm5_val[,-c(5)]
predicted <- round(predict(lm5, newdata=datos_lm5_val_pred, type="response"))
actual <- datos_lm5_val$NRO_ACCID
lm5_val_mse <- MSE(predicted, actual) # MSE
lm5_val_mae <- MAE(predicted, actual) # MAE
lm5_val_r2 <- R2_Score(predicted, actual) # R2
sprintf("MSE: %f, MAE: %f, R2: %f", lm5_val_mse, lm5_val_mae, lm5_val_r2)
mae_tr = lm5_tr_mae
mae_vl = lm5_val_mae
print(mae_variation(mae_tr, mae_val))
datos_lm5_val <- datos_val_2020 %>% group_by(FECHA, FESTIVIDAD,
DIA_SEMANA, COMUNA) %>% count(name = "NRO_ACCID")
datos_lm5_val_pred <- datos_lm5_val[,-c(5)]
predicted <- round(predict(lm5, newdata=datos_lm5_val_pred, type="response"))
actual <- datos_lm5_val$NRO_ACCID
lm5_val_mse <- MSE(predicted, actual) # MSE
lm5_val_mae <- MAE(predicted, actual) # MAE
lm5_val_r2 <- R2_Score(predicted, actual) # R2
sprintf("MSE: %f, MAE: %f, R2: %f", lm5_val_mse, lm5_val_mae, lm5_val_r2)
mae_tr = lm5_tr_mae
mae_vl = lm5_val_mae
print(mae_variation(mae_tr, mae_val))
datos_lm6_tr <- base_train %>% group_by(FECHA, FESTIVIDAD, DIA_SEMANA,
CLASE, COMUNA) %>% count(name = "NRO_ACCID")
# lm6 <- lm(NRO_ACCID ~ FESTIVIDAD+DIA_SEMANA+CLASE+COMUNA,
#            data = datos_lm6_tr)
lm6 <- glm(NRO_ACCID ~ FESTIVIDAD+DIA_SEMANA+CLASE+COMUNA, family = "poisson",
data = datos_lm6_tr)
datos_lm6_tr_pred <- datos_lm6_tr[,-c(6)]
predicted <- round(predict(lm6, newdata=datos_lm6_tr_pred, type="response"))
actual <- datos_lm6_tr$NRO_ACCID
lm6_tr_mse <- MSE(predicted, actual) # MSE
lm6_tr_mae <- MAE(predicted, actual) # MAE
lm6_tr_r2 <- R2_Score(predicted, actual) # R2
sprintf("MSE: %f, MAE: %f, R2: %f", lm6_tr_mse, lm6_tr_mae, lm6_tr_r2)
datos_lm6_val <- datos_val_2019 %>% group_by(FECHA, FESTIVIDAD, DIA_SEMANA,
CLASE, COMUNA) %>% count(name = "NRO_ACCID")
datos_lm6_val_pred <- datos_lm6_val[,-c(6)]
predicted <- round(predict(lm6, newdata=datos_lm6_val_pred, type="response"))
actual <- datos_lm6_val$NRO_ACCID
lm6_val_mse <- MSE(predicted, actual) # MSE
lm6_val_mae <- MAE(predicted, actual) # MAE
lm6_val_r2 <- R2_Score(predicted, actual) # R2
sprintf("MSE: %f, MAE: %f, R2: %f", lm6_val_mse, lm6_val_mae, lm6_val_r2)
mae_tr = lm6_tr_mae
mae_vl = lm6_val_mae
print(mae_variation(mae_tr, mae_val))
datos_lm6_val <- datos_val_2020 %>% group_by(FECHA, FESTIVIDAD, DIA_SEMANA,
CLASE, COMUNA) %>% count(name = "NRO_ACCID")
datos_lm6_val_pred <- datos_lm6_val[,-c(6)]
predicted <- round(predict(lm6, newdata=datos_lm6_val_pred, type="response"))
actual <- datos_lm6_val$NRO_ACCID
lm6_val_mse <- MSE(predicted, actual) # MSE
lm6_val_mae <- MAE(predicted, actual) # MAE
lm6_val_r2 <- R2_Score(predicted, actual) # R2
sprintf("MSE: %f, MAE: %f, R2: %f", lm6_val_mse, lm6_val_mae, lm6_val_r2)
mae_tr = lm6_tr_mae
mae_vl = lm6_val_mae
print(mae_variation(mae_tr, mae_val))
datos_lm6_tr_semanal <- base_train %>% group_by(FECHA, FESTIVIDAD, SEMANA,
CLASE, COMUNA) %>% count(name = "NRO_ACCID")
# lm6 <- lm(NRO_ACCID ~ FESTIVIDAD+DIA_SEMANA+CLASE+COMUNA,
#            data = datos_lm6_tr)
lm6_semanal <- glm(NRO_ACCID ~ FESTIVIDAD+SEMANA+CLASE+COMUNA, family = "poisson",
data = datos_lm6_tr_semanal)
datos_lm6_tr_pred_semanal <- datos_lm6_tr_semanal[,-c(6)]
predicted <- round(predict(lm6_semanal, newdata=datos_lm6_tr_pred_semanal, type="response"))
actual <- datos_lm6_tr_semanal$NRO_ACCID
lm6_tr_semanal_mse <- MSE(predicted, actual) # MSE
lm6_tr_semanal_mae <- MAE(predicted, actual) # MAE
lm6_tr_semanal_r2 <- R2_Score(predicted, actual) # R2
sprintf("MSE: %f, MAE: %f, R2: %f", lm6_tr_semanal_mse, lm6_tr_semanal_mae, lm6_tr_semanal_r2)
datos_lm6_val_semanal <- datos_val_2019 %>% group_by(FECHA, FESTIVIDAD, SEMANA,
CLASE, COMUNA) %>% count(name = "NRO_ACCID")
datos_lm6_val_pred_semanal <- datos_lm6_val_semanal[,-c(6)]
predicted <- round(predict(lm6_semanal, newdata=datos_lm6_val_pred_semanal, type="response"))
actual <- datos_lm6_val_semanal$NRO_ACCID
lm6_val_semanal_mse <- MSE(predicted, actual) # MSE
lm6_val_semanal_mae <- MAE(predicted, actual) # MAE
lm6_val_semanal_r2 <- R2_Score(predicted, actual) # R2
sprintf("MSE: %f, MAE: %f, R2: %f", lm6_val_semanal_mse, lm6_val_semanal_mae, lm6_val_semanal_r2)
mae_tr = lm6_tr_semanal_mae
mae_vl = lm6_val_semanal_mae
print(mae_variation(mae_tr, mae_val))
datos_lm6_val_semanal <- datos_val_2020 %>% group_by(FECHA, FESTIVIDAD, SEMANA,
CLASE, COMUNA) %>% count(name = "NRO_ACCID")
datos_lm6_val_pred_semanal <- datos_lm6_val_semanal[,-c(6)]
predicted <- round(predict(lm6_semanal, newdata=datos_lm6_val_pred_semanal, type="response"))
actual <- datos_lm6_val_semanal$NRO_ACCID
lm6_val_semanal_mse <- MSE(predicted, actual) # MSE
lm6_val_semanal_mae <- MAE(predicted, actual) # MAE
lm6_val_semanal_r2 <- R2_Score(predicted, actual) # R2
sprintf("MSE: %f, MAE: %f, R2: %f", lm6_val_semanal_mse, lm6_val_semanal_mae, lm6_val_semanal_r2)
mae_tr = lm6_tr_semanal_mae
mae_vl = lm6_val_semanal_mae
print(mae_variation(mae_tr, mae_val))
datos_lm6_tr_mensual <- base_train %>% group_by(FECHA, FESTIVIDAD, MES,
CLASE, COMUNA) %>% count(name = "NRO_ACCID")
# lm6 <- lm(NRO_ACCID ~ FESTIVIDAD+DIA_SEMANA+CLASE+COMUNA,
#            data = datos_lm6_tr)
lm6_mensual <- glm(NRO_ACCID ~ FESTIVIDAD+MES+CLASE+COMUNA, family = "poisson",
data = datos_lm6_tr_mensual)
datos_lm6_tr_pred_mensual <- datos_lm6_tr_mensual[,-c(6)]
predicted <- round(predict(lm6_mensual, newdata=datos_lm6_tr_pred_mensual, type="response"))
actual <- datos_lm6_tr_mensual$NRO_ACCID
lm6_tr_mensual_mse <- MSE(predicted, actual) # MSE
lm6_tr_mensual_mae <- MAE(predicted, actual) # MAE
lm6_tr_mensual_r2 <- R2_Score(predicted, actual) # R2
sprintf("MSE: %f, MAE: %f, R2: %f", lm6_tr_mensual_mse, lm6_tr_mensual_mae, lm6_tr_mensual_r2)
datos_lm6_val_mensual <- datos_val_2019 %>% group_by(FECHA, FESTIVIDAD, MES,
CLASE, COMUNA) %>% count(name = "NRO_ACCID")
datos_lm6_val_pred_mensual <- datos_lm6_val_mensual[,-c(6)]
predicted <- round(predict(lm6_mensual, newdata=datos_lm6_val_pred_mensual, type="response"))
actual <- datos_lm6_val_mensual$NRO_ACCID
lm6_val_mensual_mse <- MSE(predicted, actual) # MSE
lm6_val_mensual_mae <- MAE(predicted, actual) # MAE
lm6_val_mensual_r2 <- R2_Score(predicted, actual) # R2
sprintf("MSE: %f, MAE: %f, R2: %f", lm6_val_mensual_mse, lm6_val_mensual_mae, lm6_val_mensual_r2)
mae_tr = lm6_tr_mensual_mae
mae_vl = lm6_val_mensual_mae
print(mae_variation(mae_tr, mae_val))
datos_lm6_val_mensual <- datos_val_2020 %>% group_by(FECHA, FESTIVIDAD, MES,
CLASE, COMUNA) %>% count(name = "NRO_ACCID")
datos_lm6_val_pred_mensual <- datos_lm6_val_mensual[,-c(6)]
predicted <- round(predict(lm6_mensual, newdata=datos_lm6_val_pred_mensual, type="response"))
actual <- datos_lm6_val_mensual$NRO_ACCID
lm6_val_mensual_mse <- MSE(predicted, actual) # MSE
lm6_val_mensual_mae <- MAE(predicted, actual) # MAE
lm6_val_mensual_r2 <- R2_Score(predicted, actual) # R2
sprintf("MSE: %f, MAE: %f, R2: %f", lm6_val_mensual_mse, lm6_val_mensual_mae, lm6_val_mensual_r2)
mae_tr = lm6_tr_mensual_mae
mae_vl = lm6_val_mensual_mae
print(mae_variation(mae_tr, mae_val))
View(accidentes_tipo_festividad)
View(accidentes_tipo_festividad)
accidentes_tipo_festividad <- bd_final %>%
group_by(TIPO_FESTIVIDAD) %>%
summarise(numero_de_accidentes = n())
accidentes_tipo_festividad <- accidentes_tipo_festividad[c(1,2,3,4,5,6),]
View(accidentes_tipo_festividad)
View(accidentes_tipo_festividad)
accidentes_tipo_festividad <- bd_final %>%
group_by(TIPO_FESTIVIDAD) %>%
summarise(numero_de_accidentes = n())
accidentes_tipo_festividad <- accidentes_tipo_festividad[c(1,2,3,4,5),]
accidentes_tipo_festividad$TIPO_FESTIVIDAD <- gsub("A_NUEVO","AÑO NUEVO",accidentes_tipo_festividad$TIPO_FESTIVIDAD)
accidentes_tipo_festividad$TIPO_FESTIVIDAD <- gsub("SEM_SANTA","SEMANA SANTA",accidentes_tipo_festividad$TIPO_FESTIVIDAD)
accidentes_tipo_festividad$TIPO_FESTIVIDAD <- gsub("MADRES","DIA DE LAS MADRES",accidentes_tipo_festividad$TIPO_FESTIVIDAD)
accidentes_tipo_festividad$TIPO_FESTIVIDAD <- gsub("BRUJAS","HALLOWEEN",accidentes_tipo_festividad$TIPO_FESTIVIDAD)
ggplot(data = accidentes_tipo_festividad, aes(fill = TIPO_FESTIVIDAD, x = TIPO_FESTIVIDAD, y = numero_de_accidentes)) +
geom_bar(stat = "identity") +
geom_text(aes(y = numero_de_accidentes, label = numero_de_accidentes), vjust = -0.5) +
xlab("Tipo de festividad") +
ylab("Número de acccidentes") +
ggtitle("Número de accidentes por tipo de festividad") +
ylim(c(0,5000))+
theme(plot.title = element_text(hjust = 0.5),legend.position = "none")
#Mostramos las primeras 5 observaciones de la base de datos
#head(bd,n=5)
library(DT)
datatable(data, options = list(), class = "display",
callback = JS("return table;"), rownames, colnames, container,
caption = NULL, filter = c("none", "bottom", "top"), escape = TRUE,
style = "auto", width = NULL, height = NULL, elementId = NULL,
fillContainer = getOption("DT.fillContainer", NULL),
autoHideNavigation = getOption("DT.autoHideNavigation", NULL),
selection = c("multiple", "single", "none"), extensions = list(),
plugins = NULL, editable = FALSE)
#Mostramos las primeras 5 observaciones de la base de datos
#head(bd,n=5)
library(DT)
datable(head(bd))
#Mostramos las primeras 5 observaciones de la base de datos
#head(bd,n=5)
library(DT)
DT::datable(head(bd))
#Mostramos las primeras 5 observaciones de la base de datos
#head(bd,n=5)
library(DT)
DT::datatable(head(iris), editable = list(
target = 'row', disable = list(columns = c(1, 3, 4))
))
#Mostramos las primeras 5 observaciones de la base de datos
#head(bd,n=5)
library(DT)
DT::datatable(head(bd), editable = list(
target = 'row', disable = list(columns = c(1, 3, 4))
))
DT::datatable(head(base2), editable = list(
target = 'row', disable = list(columns = c(1, 3, 4))
))
